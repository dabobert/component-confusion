"use client"

import * as React from 'react';
import { d as animationFrameThrottle, l as listenEvent, e as setStyle, f as createDisposalBin, g as effect } from './vidstack-CvduS_bi.js';
import { a as useMediaPlayer } from './vidstack-BthB6HyT.js';

function useClassName(el, className) {
  React.useEffect(() => {
    if (!el || !className)
      return;
    const tokens = className.split(" ");
    for (const token of tokens)
      el.classList.add(token);
    return () => {
      for (const token of tokens)
        el.classList.remove(token);
    };
  }, [el, className]);
}
function useResizeObserver(el, callback) {
  React.useEffect(() => {
    if (!el)
      return;
    callback();
    const observer = new ResizeObserver(animationFrameThrottle(callback));
    observer.observe(el);
    return () => observer.disconnect();
  }, [el, callback]);
}
function useTransitionActive(el) {
  const [isActive, setIsActive] = React.useState(false);
  React.useEffect(() => {
    if (!el)
      return;
    const disposal = createDisposalBin();
    disposal.add(
      listenEvent(el, "transitionstart", () => setIsActive(true)),
      listenEvent(el, "transitionend", () => setIsActive(false))
    );
    return () => disposal.empty();
  }, [el]);
  return isActive;
}
function useMouseEnter(el) {
  const [hasEntered, setHasEntered] = React.useState(false);
  React.useEffect(() => {
    if (!el)
      return;
    const disposal = createDisposalBin();
    disposal.add(
      listenEvent(el, "mouseenter", () => setHasEntered(true)),
      listenEvent(el, "mouseleave", () => setHasEntered(false))
    );
    return () => disposal.empty();
  }, [el]);
  return hasEntered;
}
function useFocusIn(el) {
  const [isFocusIn, setIsFocusIn] = React.useState(false);
  React.useEffect(() => {
    if (!el)
      return;
    const disposal = createDisposalBin();
    disposal.add(
      listenEvent(el, "focusin", () => setIsFocusIn(true)),
      listenEvent(el, "focusout", () => setIsFocusIn(false))
    );
    return () => disposal.empty();
  }, [el]);
  return isFocusIn;
}
function useActive(el) {
  const hasMouseEntered = useMouseEnter(el), isFocusIn = useFocusIn(el);
  return hasMouseEntered || isFocusIn;
}
function useRectCSSVars(root, el, prefix) {
  const onResize = React.useCallback(() => {
    if (root && el)
      setRectCSSVars(root, el, prefix);
  }, [root, el, prefix]);
  useResizeObserver(el, onResize);
}
function setRectCSSVars(root, el, prefix) {
  const rect = el.getBoundingClientRect();
  for (const side of ["top", "left", "bottom", "right"]) {
    setStyle(root, `--${prefix}-${side}`, `${rect[side]}px`);
  }
}

function useLayoutName(name) {
  const player = useMediaPlayer();
  React.useEffect(() => {
    if (!player)
      return;
    return effect(() => {
      player.$el?.setAttribute("data-layout", name);
      return () => player.$el?.removeAttribute("data-layout");
    });
  }, [player]);
}

export { useClassName as a, useResizeObserver as b, useTransitionActive as c, useActive as d, useMouseEnter as e, useRectCSSVars as f, useLayoutName as u };
