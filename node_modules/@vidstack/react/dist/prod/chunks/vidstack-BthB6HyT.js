"use client"

import * as React from 'react';
import { S as useReactContext, K as createReactComponent, C as composeRefs, a as useSignal, H as noop, u as useStateContext, s as signal, g as effect, j as isString } from './vidstack-CvduS_bi.js';
import { B as mediaContext, P as Primitive, b5 as AirPlayButtonInstance, b4 as PlayButtonInstance, a$ as CaptionButtonInstance, b0 as FullscreenButtonInstance, b2 as MuteButtonInstance, b3 as PIPButtonInstance, b6 as SeekButtonInstance, b1 as LiveButtonInstance, ba as SliderValueInstance, S as SliderInstance, bc as SliderPreviewInstance, b8 as VolumeSliderInstance, I as IS_SERVER$1, bm as ThumbnailInstance, b7 as TimeSliderInstance, bd as SliderChaptersInstance, b9 as SliderThumbnailInstance, bb as SliderVideoInstance, V as mediaState, bj as RadioGroupInstance, bk as RadioInstance, u as useMediaState, be as MenuInstance, bf as MenuButtonInstance, bg as MenuItemsInstance, bh as MenuItemInstance, bl as GestureInstance, bn as TimeInstance, A as isTrackCaptionKind } from './vidstack-DD0YAtlF.js';
import { createPortal } from 'react-dom';

function useMediaContext() {
  return useReactContext(mediaContext);
}

const AirPlayButtonBridge = createReactComponent(AirPlayButtonInstance, {
  domEventsRegex: /^onMedia/
});
const AirPlayButton = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(AirPlayButtonBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
AirPlayButton.displayName = "AirPlayButton";

const PlayButtonBridge = createReactComponent(PlayButtonInstance, {
  domEventsRegex: /^onMedia/
});
const PlayButton = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(PlayButtonBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
PlayButton.displayName = "PlayButton";

const CaptionButtonBridge = createReactComponent(CaptionButtonInstance, {
  domEventsRegex: /^onMedia/
});
const CaptionButton = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(CaptionButtonBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
CaptionButton.displayName = "CaptionButton";

const FullscreenButtonBridge = createReactComponent(FullscreenButtonInstance, {
  domEventsRegex: /^onMedia/
});
const FullscreenButton = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(FullscreenButtonBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
FullscreenButton.displayName = "FullscreenButton";

const MuteButtonBridge = createReactComponent(MuteButtonInstance, {
  domEventsRegex: /^onMedia/
});
const MuteButton = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(MuteButtonBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
MuteButton.displayName = "MuteButton";

const PIPButtonBridge = createReactComponent(PIPButtonInstance, {
  domEventsRegex: /^onMedia/
});
const PIPButton = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(PIPButtonBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
PIPButton.displayName = "PIPButton";

const SeekButtonBridge = createReactComponent(SeekButtonInstance, {
  domEventsRegex: /^onMedia/
});
const SeekButton = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(SeekButtonBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
SeekButton.displayName = "SeekButton";

const LiveButtonBridge = createReactComponent(LiveButtonInstance, {
  domEventsRegex: /^onMedia/
});
const LiveButton = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(LiveButtonBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
LiveButton.displayName = "LiveButton";

const SliderValueBridge = createReactComponent(SliderValueInstance);

const SliderBridge = createReactComponent(SliderInstance, {
  events: [
    "onDragStart",
    "onDragEnd",
    "onDragValueChange",
    "onValueChange",
    "onPointerValueChange"
  ]
});
const Root$5 = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(SliderBridge, { ...props, ref: forwardRef }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2 }, children));
});
Root$5.displayName = "Slider";
const Thumb = React.forwardRef((props, forwardRef) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props, ref: forwardRef }));
Thumb.displayName = "SliderThumb";
const Track = React.forwardRef((props, forwardRef) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props, ref: forwardRef }));
Track.displayName = "SliderTrack";
const TrackFill = React.forwardRef((props, forwardRef) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props, ref: forwardRef }));
TrackFill.displayName = "SliderTrackFill";
const PreviewBridge = createReactComponent(SliderPreviewInstance);
const Preview = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(PreviewBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
Preview.displayName = "SliderPreview";
const Value$2 = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(SliderValueBridge, { ...props }, (props2, instance) => {
    const $text = useSignal(() => instance.getValueText(), instance);
    return /* @__PURE__ */ React.createElement(Primitive.div, { ...props2, ref: forwardRef }, $text, children);
  });
});
Value$2.displayName = "SliderValue";

var slider = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Preview: Preview,
  Root: Root$5,
  Thumb: Thumb,
  Track: Track,
  TrackFill: TrackFill,
  Value: Value$2
});

const VolumeSliderBridge = createReactComponent(VolumeSliderInstance, {
  domEventsRegex: /^onMedia/
});
const Root$4 = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(VolumeSliderBridge, { ...props, ref: forwardRef }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2 }, children));
  }
);
Root$4.displayName = "VolumeSlider";
const Value$1 = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(SliderValueBridge, { ...props }, (props2, instance) => {
    const $text = useSignal(() => instance.getValueText(), instance);
    return /* @__PURE__ */ React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, $text, children);
  });
});
Value$1.displayName = "SliderValue";

var volumeSlider = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Preview: Preview,
  Root: Root$4,
  Thumb: Thumb,
  Track: Track,
  TrackFill: TrackFill,
  Value: Value$1
});

function createVTTCue(startTime = 0, endTime = 0, text = "") {
  if (IS_SERVER$1) {
    return {
      startTime,
      endTime,
      text,
      addEventListener: noop,
      removeEventListener: noop,
      dispatchEvent: noop
    };
  }
  return new window.VTTCue(startTime, endTime, text);
}

const ThumbnailBridge = createReactComponent(ThumbnailInstance);
const Root$3 = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(ThumbnailBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
});
Root$3.displayName = "Thumbnail";
const Img = React.forwardRef(({ children, ...props }, forwardRef) => {
  const { src, img, crossOrigin } = useStateContext(ThumbnailInstance.state), $src = useSignal(src), $crossOrigin = useSignal(crossOrigin);
  return /* @__PURE__ */ React.createElement(
    Primitive.img,
    {
      crossOrigin: $crossOrigin,
      ...props,
      src: $src,
      ref: composeRefs(img.set, forwardRef)
    },
    children
  );
});
Img.displayName = "ThumbnailImg";

var thumbnail = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Img: Img,
  Root: Root$3
});

const TimeSliderContext = React.createContext({
  $chapters: signal(null)
});
TimeSliderContext.displayName = "TimeSliderContext";
const TimeSliderBridge = createReactComponent(TimeSliderInstance, {
  domEventsRegex: /^onMedia/
});
const Root$2 = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    const $chapters = React.useMemo(() => signal(null), []);
    return /* @__PURE__ */ React.createElement(TimeSliderContext.Provider, { value: { $chapters } }, /* @__PURE__ */ React.createElement(TimeSliderBridge, { ...props, ref: forwardRef }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2 }, children)));
  }
);
Root$2.displayName = "TimeSlider";
const SliderChaptersBridge = createReactComponent(SliderChaptersInstance);
const Chapters = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(SliderChaptersBridge, { ...props }, (props2, instance) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, /* @__PURE__ */ React.createElement(ChapterTracks, { instance }, children)));
  }
);
Chapters.displayName = "SliderChapters";
function ChapterTracks({ instance, children }) {
  const $cues = useSignal(() => instance.cues, instance), refs = React.useRef([]), emptyCue = React.useRef(), { $chapters } = React.useContext(TimeSliderContext);
  if (!emptyCue.current) {
    emptyCue.current = createVTTCue();
  }
  React.useEffect(() => {
    $chapters.set(instance);
    return () => void $chapters.set(null);
  }, [instance]);
  React.useEffect(() => {
    instance.setRefs(refs.current);
  }, [$cues]);
  return children($cues.length ? $cues : [emptyCue.current], (el) => {
    if (!el) {
      refs.current.length = 0;
      return;
    }
    refs.current.push(el);
  });
}
ChapterTracks.displayName = "SliderChapterTracks";
const ChapterTitle = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    const { $chapters } = React.useContext(TimeSliderContext), [title, setTitle] = React.useState();
    React.useEffect(() => {
      return effect(() => {
        const chapters = $chapters(), cue = chapters?.activePointerCue || chapters?.activeCue;
        setTitle(cue?.text || "");
      });
    }, []);
    return /* @__PURE__ */ React.createElement(Primitive.div, { ...props, ref: forwardRef }, title, children);
  }
);
ChapterTitle.displayName = "SliderChapterTitle";
const Value = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(SliderValueBridge, { ...props }, (props2, instance) => {
    const $text = useSignal(() => instance.getValueText(), instance);
    return /* @__PURE__ */ React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, $text, children);
  });
});
Value.displayName = "SliderValue";
const Progress = React.forwardRef((props, forwardRef) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props, ref: forwardRef }));
Progress.displayName = "SliderProgress";
const SliderThumbnailBridge = createReactComponent(SliderThumbnailInstance);
const ThumbnailRoot = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(SliderThumbnailBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
ThumbnailRoot.displayName = "SliderThumbnail";
const Thumbnail = {
  Root: ThumbnailRoot,
  Img: Img
};
const VideoBridge = createReactComponent(SliderVideoInstance, {
  events: ["onCanPlay", "onError"]
});
const Video = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(VideoBridge, { ...props }, (props2, instance) => /* @__PURE__ */ React.createElement(VideoProvider, { ...props2, instance, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
Video.displayName = "SliderVideo";
const VideoProvider = React.forwardRef(
  ({ instance, children, ...props }, forwardRef) => {
    const { canLoad } = useStateContext(mediaState), { src, video, crossOrigin } = instance.$state, $src = useSignal(src), $canLoad = useSignal(canLoad), $crossOrigin = useSignal(crossOrigin);
    return /* @__PURE__ */ React.createElement(
      Primitive.video,
      {
        style: { maxWidth: "unset" },
        ...props,
        src: $src || void 0,
        muted: true,
        playsInline: true,
        preload: $canLoad ? "auto" : "none",
        crossOrigin: $crossOrigin || void 0,
        ref: composeRefs(video.set, forwardRef)
      },
      children
    );
  }
);
VideoProvider.displayName = "SliderVideoProvider";

var timeSlider = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ChapterTitle: ChapterTitle,
  Chapters: Chapters,
  Preview: Preview,
  Progress: Progress,
  Root: Root$2,
  Thumb: Thumb,
  Thumbnail: Thumbnail,
  Track: Track,
  TrackFill: TrackFill,
  Value: Value,
  Video: Video
});

const RadioGroupBridge = createReactComponent(RadioGroupInstance, {
  events: ["onChange"]
});
const Root$1 = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(RadioGroupBridge, { ...props, ref: forwardRef }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2 }, children));
  }
);
Root$1.displayName = "RadioGroup";
const ItemBridge$1 = createReactComponent(RadioInstance, {
  events: ["onChange", "onSelect"]
});
const Item$1 = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(ItemBridge$1, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
});
Item$1.displayName = "RadioItem";

var radioGroup = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Item: Item$1,
  Root: Root$1
});

const IS_SERVER = typeof document === "undefined";

const MenuBridge = createReactComponent(MenuInstance, {
  events: ["onOpen", "onClose"],
  domEventsRegex: /^onMedia/
});
const Root = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(MenuBridge, { ...props, ref: forwardRef }, (props2, instance) => /* @__PURE__ */ React.createElement(
    Primitive.div,
    {
      ...props2,
      style: { display: !instance.isSubmenu ? "contents" : void 0, ...props2.style }
    },
    children
  ));
});
Root.displayName = "Menu";
const ButtonBridge = createReactComponent(MenuButtonInstance, {
  events: ["onSelect"]
});
const Button = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(ButtonBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
  }
);
Button.displayName = "MenuButton";
const Portal = React.forwardRef(
  ({ disabled = false, children, ...props }, forwardRef) => {
    let fullscreen = useMediaState("fullscreen"), shouldPortal = disabled === "fullscreen" ? !fullscreen : !disabled;
    return IS_SERVER || !shouldPortal ? children : createPortal(
      /* @__PURE__ */ React.createElement(
        Primitive.div,
        {
          ...props,
          style: { display: "contents", ...props.style },
          ref: forwardRef
        },
        children
      ),
      document.body
    );
  }
);
Portal.displayName = "MenuPortal";
const ItemsBridge = createReactComponent(MenuItemsInstance);
const Items = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(ItemsBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
});
Items.displayName = "MenuItems";
const ItemBridge = createReactComponent(MenuItemInstance);
const Item = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(ItemBridge, { ...props }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef) }, children));
});
Item.displayName = "MenuItem";

var menu = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Button: Button,
  Content: Items,
  Item: Item,
  Items: Items,
  Portal: Portal,
  Radio: Item$1,
  RadioGroup: Root$1,
  Root: Root
});

const GestureBridge = createReactComponent(GestureInstance, {
  events: ["onWillTrigger", "onTrigger"]
});
const Gesture = React.forwardRef(
  ({ children, ...props }, forwardRef) => {
    return /* @__PURE__ */ React.createElement(GestureBridge, { ...props, ref: forwardRef }, (props2) => /* @__PURE__ */ React.createElement(Primitive.div, { ...props2 }, children));
  }
);
Gesture.displayName = "Gesture";

const TimeBridge = createReactComponent(TimeInstance);
const Time = React.forwardRef(({ children, ...props }, forwardRef) => {
  return /* @__PURE__ */ React.createElement(TimeBridge, { ...props }, (props2, instance) => /* @__PURE__ */ React.createElement(TimeText, { ...props2, instance, ref: composeRefs(props2.ref, forwardRef) }, children));
});
Time.displayName = "Time";
const TimeText = React.forwardRef(
  ({ instance, children, ...props }, forwardRef) => {
    const { timeText } = instance.$state, $timeText = useSignal(timeText);
    return /* @__PURE__ */ React.createElement(Primitive.div, { ...props, ref: forwardRef }, $timeText, children);
  }
);
TimeText.displayName = "TimeText";

function useMediaPlayer() {
  const context = useMediaContext();
  return context?.player || null;
}

function useAudioOptions() {
  const media = useMediaContext(), { audioTracks, audioTrack } = media.$state, $audioTracks = useSignal(audioTracks);
  useSignal(audioTrack);
  return React.useMemo(() => {
    const options = $audioTracks.map((track) => ({
      track,
      label: track.label,
      value: getTrackValue$1(track),
      get selected() {
        return audioTrack() === track;
      },
      select(trigger) {
        const index = audioTracks().indexOf(track);
        if (index >= 0)
          media.remote.changeAudioTrack(index, trigger);
      }
    }));
    Object.defineProperty(options, "disabled", {
      get() {
        return options.length <= 1;
      }
    });
    Object.defineProperty(options, "selectedTrack", {
      get() {
        return audioTrack();
      }
    });
    Object.defineProperty(options, "selectedValue", {
      get() {
        const track = audioTrack();
        return track ? getTrackValue$1(track) : void 0;
      }
    });
    return options;
  }, [$audioTracks]);
}
function getTrackValue$1(track) {
  return track.label.toLowerCase();
}

function useCaptionOptions({ off = true } = {}) {
  const media = useMediaContext(), { textTracks, textTrack } = media.$state, $textTracks = useSignal(textTracks);
  useSignal(textTrack);
  return React.useMemo(() => {
    const captionTracks = $textTracks.filter(isTrackCaptionKind), options = captionTracks.map((track) => ({
      track,
      label: track.label,
      value: getTrackValue(track),
      get selected() {
        return textTrack() === track;
      },
      select(trigger) {
        const index = textTracks().indexOf(track);
        if (index >= 0)
          media.remote.changeTextTrackMode(index, "showing", trigger);
      }
    }));
    if (off) {
      options.unshift({
        track: null,
        label: isString(off) ? off : "Off",
        value: "off",
        get selected() {
          return !textTrack();
        },
        select(trigger) {
          media.remote.toggleCaptions(trigger);
        }
      });
    }
    Object.defineProperty(options, "disabled", {
      get() {
        return !captionTracks.length;
      }
    });
    Object.defineProperty(options, "selectedTrack", {
      get() {
        return textTrack();
      }
    });
    Object.defineProperty(options, "selectedValue", {
      get() {
        const track = textTrack();
        return track ? getTrackValue(track) : "off";
      }
    });
    return options;
  }, [$textTracks]);
}
function getTrackValue(track) {
  return track.id + ":" + track.kind + "-" + track.label.toLowerCase();
}

function useVideoQualityOptions({
  auto = true,
  sort = "descending"
} = {}) {
  const media = useMediaContext(), { qualities, quality, autoQuality, canSetQuality } = media.$state, $qualities = useSignal(qualities);
  useSignal(quality);
  useSignal(autoQuality);
  useSignal(canSetQuality);
  return React.useMemo(() => {
    const options = [...$qualities].sort(sort === "descending" ? sortDescending : sortAscending).map((_quality) => {
      return {
        quality: _quality,
        label: _quality.height + "p",
        value: getQualityValue(_quality),
        bitrateText: _quality.bitrate >= 0 ? `${(_quality.bitrate / 1e6).toFixed(2)} Mbps` : null,
        get selected() {
          return _quality === quality();
        },
        get autoSelected() {
          return autoQuality();
        },
        select(trigger) {
          const index = qualities().indexOf(_quality);
          if (index >= 0)
            media.remote.changeQuality(index, trigger);
        }
      };
    });
    if (auto) {
      options.unshift({
        quality: null,
        label: isString(auto) ? auto : "Auto",
        value: "auto",
        bitrateText: null,
        get selected() {
          return autoQuality();
        },
        get autoSelected() {
          return autoQuality();
        },
        select(trigger) {
          media.remote.requestAutoQuality(trigger);
        }
      });
    }
    Object.defineProperty(options, "disabled", {
      get() {
        return !canSetQuality() || !$qualities.length;
      }
    });
    Object.defineProperty(options, "selectedQuality", {
      get() {
        return quality();
      }
    });
    Object.defineProperty(options, "selectedValue", {
      get() {
        const $quality = quality();
        return !autoQuality() && $quality ? getQualityValue($quality) : "auto";
      }
    });
    return options;
  }, [$qualities, sort]);
}
function sortAscending(a, b) {
  return a.height === b.height ? a.bitrate - b.bitrate : a.height - b.height;
}
function sortDescending(a, b) {
  return b.height === a.height ? b.bitrate - a.bitrate : b.height - a.height;
}
function getQualityValue(quality) {
  return quality.height + "_" + quality.bitrate;
}

const DEFAULT_PLAYBACK_RATES = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2];
function usePlaybackRateOptions({
  rates = DEFAULT_PLAYBACK_RATES,
  normalLabel = "Normal"
} = {}) {
  const media = useMediaContext(), { playbackRate, canSetPlaybackRate } = media.$state;
  useSignal(playbackRate);
  useSignal(canSetPlaybackRate);
  return React.useMemo(() => {
    const options = rates.map((opt) => {
      const label = typeof opt === "number" ? opt === 1 && normalLabel ? normalLabel : opt + "x" : opt.label, rate = typeof opt === "number" ? opt : opt.rate;
      return {
        label,
        value: rate.toString(),
        rate,
        get selected() {
          return playbackRate() === rate;
        },
        select(trigger) {
          media.remote.changePlaybackRate(rate, trigger);
        }
      };
    });
    Object.defineProperty(options, "disabled", {
      get() {
        return !canSetPlaybackRate() || !options.length;
      }
    });
    Object.defineProperty(options, "selectedValue", {
      get() {
        return playbackRate().toString();
      }
    });
    return options;
  }, [rates]);
}

export { AirPlayButton as A, Button as B, CaptionButton as C, radioGroup as D, menu as E, FullscreenButton as F, Gesture as G, thumbnail as H, Img as I, LiveButton as L, MuteButton as M, PlayButton as P, Root$3 as R, SeekButton as S, Thumbnail as T, Value as V, useMediaPlayer as a, PIPButton as b, Root$2 as c, Preview as d, Time as e, Root as f, Items as g, useAudioOptions as h, Root$1 as i, Item$1 as j, usePlaybackRateOptions as k, useCaptionOptions as l, useVideoQualityOptions as m, Root$4 as n, Track as o, TrackFill as p, Thumb as q, Value$1 as r, Chapters as s, Progress as t, useMediaContext as u, ChapterTitle as v, Portal as w, slider as x, volumeSlider as y, timeSlider as z };
