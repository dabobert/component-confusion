"use client"

import * as React from 'react';
import { a as useSignal, o as isBoolean, m as isArray, B as uppercaseFirstChar, i as isUndefined, l as listenEvent, I as toggleClass, q as camelToKebabCase, J as useContext } from './vidstack-CvduS_bi.js';
import { c as createComputed, R as Root$2, T as Trigger, C as Content, G as GoogleCastButton, a as Title, b as ChapterTitle$1, u as useChapterOptions, d as Captions, e as Root$6, f as Group, g as useChapterTitle, h as createEffect, i as Root$7, j as Track$1, k as TrackFill$1 } from './vidstack-Caa7In1T.js';
import { b as useResizeObserver, u as useLayoutName, c as useTransitionActive, d as useActive, e as useMouseEnter, f as useRectCSSVars } from './vidstack--kGe51hP.js';
import { u as useMediaContext, B as Button, i as Root, j as Item, f as Root$1, g as Items, a as useMediaPlayer, M as MuteButton, A as AirPlayButton, P as PlayButton, C as CaptionButton, b as PIPButton, F as FullscreenButton, S as SeekButton, n as Root$3, o as Track, p as TrackFill, q as Thumb, d as Preview, r as Value, c as Root$4, s as Chapters, t as Progress, T as Thumbnail, v as ChapterTitle, V as Value$1, L as LiveButton, R as Root$5, I as Img, w as Portal, h as useAudioOptions, k as usePlaybackRateOptions, m as useVideoQualityOptions, l as useCaptionOptions, e as Time, G as Gesture } from './vidstack-BthB6HyT.js';
import { u as useMediaState, A as isTrackCaptionKind, q as isRemotionSource, P as Primitive, B as mediaContext } from './vidstack-DD0YAtlF.js';
import { b as RemotionSliderThumbnail, R as RemotionThumbnail } from './vidstack-Nxbu5UbW.js';

const DefaultLayoutContext = React.createContext({});
DefaultLayoutContext.displayName = "DefaultLayoutContext";
function useDefaultLayoutContext() {
  return React.useContext(DefaultLayoutContext);
}
function useDefaultLayoutWord(word) {
  const { translations } = useDefaultLayoutContext();
  return i18n(translations, word);
}
function i18n(translations, word) {
  return translations?.[word] ?? word;
}

function createDefaultMediaLayout({
  type,
  smLayoutWhen,
  renderLayout
}) {
  const Layout = React.forwardRef(
    ({
      children,
      className,
      disableTimeSlider = false,
      hideQualityBitrate = false,
      icons,
      menuGroup = "bottom",
      noGestures = false,
      noKeyboardActionDisplay = false,
      noModal = false,
      noScrubGesture,
      playbackRates,
      seekStep = 10,
      showMenuDelay,
      showTooltipDelay = 700,
      sliderChaptersMinWidth = 325,
      slots,
      smallLayoutWhen = smLayoutWhen,
      thumbnails = null,
      translations,
      ...props
    }, forwardRef) => {
      const media = useMediaContext(), $load = useSignal(media.$props.load), $canLoad = useMediaState("canLoad"), $viewType = useMediaState("viewType"), $streamType = useMediaState("streamType"), $smallWhen = createComputed(() => {
        return isBoolean(smallLayoutWhen) ? smallLayoutWhen : smallLayoutWhen(media.player.state);
      }, [smallLayoutWhen]), isMatch = $viewType === type, isSmallLayout = $smallWhen(), isForcedLayout = isBoolean(smallLayoutWhen), isLoadLayout = $load === "play" && !$canLoad, canRender = $canLoad || isForcedLayout || isLoadLayout;
      useSignal($smallWhen);
      return /* @__PURE__ */ React.createElement(
        "div",
        {
          ...props,
          className: `vds-${type}-layout` + (className ? ` ${className}` : ""),
          "data-match": isMatch ? "" : null,
          "data-size": isSmallLayout ? "sm" : null,
          "data-no-scrub-gesture": noScrubGesture ? "" : null,
          ref: forwardRef
        },
        canRender && isMatch ? /* @__PURE__ */ React.createElement(
          DefaultLayoutContext.Provider,
          {
            value: {
              disableTimeSlider,
              hideQualityBitrate,
              icons,
              isSmallLayout,
              menuGroup,
              noGestures,
              noKeyboardActionDisplay,
              noModal,
              noScrubGesture,
              showMenuDelay,
              showTooltipDelay,
              sliderChaptersMinWidth,
              slots,
              seekStep,
              playbackRates,
              thumbnails,
              translations
            }
          },
          renderLayout({ streamType: $streamType, isSmallLayout, isLoadLayout }),
          children
        ) : null
      );
    }
  );
  Layout.displayName = "DefaultMediaLayout";
  return Layout;
}

function DefaultSubmenuButton({
  label,
  hint = "",
  Icon,
  disabled = false
}) {
  const { icons: Icons } = React.useContext(DefaultLayoutContext);
  return /* @__PURE__ */ React.createElement(Button, { className: "vds-menu-button", disabled }, /* @__PURE__ */ React.createElement(Icons.Menu.ArrowLeft, { className: "vds-menu-button-close-icon vds-icon" }), Icon ? /* @__PURE__ */ React.createElement(Icon, { className: "vds-menu-button-icon" }) : null, /* @__PURE__ */ React.createElement("span", { className: "vds-menu-button-label" }, label), /* @__PURE__ */ React.createElement("span", { className: "vds-menu-button-hint" }, hint), /* @__PURE__ */ React.createElement(Icons.Menu.ArrowRight, { className: "vds-menu-button-open-icon vds-icon" }));
}
DefaultSubmenuButton.displayName = "DefaultSubmenuButton";
function DefaultMenuRadioGroup({ value, options, onChange }) {
  return /* @__PURE__ */ React.createElement(Root, { className: "vds-radio-group", value, onChange }, options.map((option) => /* @__PURE__ */ React.createElement(Item, { className: "vds-radio", value: option.value, key: option.value }, /* @__PURE__ */ React.createElement("div", { className: "vds-radio-check" }), /* @__PURE__ */ React.createElement("span", { className: "vds-radio-label", "data-part": "label" }, option.label))));
}
DefaultMenuRadioGroup.displayName = "DefaultMenuRadioGroup";
function createRadioOptions(entries) {
  return React.useMemo(
    () => isArray(entries) ? entries.map((entry) => ({ label: entry, value: entry.toLowerCase() })) : Object.keys(entries).map((label) => ({ label, value: entries[label] })),
    [entries]
  );
}

const COLOR_OPTIONS = ["White", "Yellow", "Green", "Cyan", "Blue", "Magenta", "Red", "Black"], OPACITY_OPTIONS = ["0%", "25%", "50%", "75%", "100%"], FONT_FAMILY_OPTIONS = {
  "Monospaced Serif": "mono-serif",
  "Proportional Serif": "pro-serif",
  "Monospaced Sans-Serif": "mono-sans",
  "Proportional Sans-Serif": "pro-sans",
  Casual: "casual",
  Cursive: "cursive",
  "Small Capitals": "capitals"
}, FONT_SIZE_OPTIONS = ["50%", "75%", "100%", "150%", "200%", "300%", "400%"], TEXT_SHADOW_OPTIONS = ["None", "Drop Shadow", "Raised", "Depressed", "Outline"];
const FontResetContext = React.createContext({ all: /* @__PURE__ */ new Set() });
FontResetContext.displayName = "FontResetContext";
function DefaultFontSubmenu() {
  const { icons: Icons } = React.useContext(DefaultLayoutContext), label = useDefaultLayoutWord("Font Styles"), $hasCaptions = useMediaState("hasCaptions"), resets = React.useMemo(() => ({ all: /* @__PURE__ */ new Set() }), []);
  if (!$hasCaptions)
    return null;
  return /* @__PURE__ */ React.createElement(FontResetContext.Provider, { value: resets }, /* @__PURE__ */ React.createElement(Root$1, { className: "vds-font-menu vds-menu" }, /* @__PURE__ */ React.createElement(DefaultSubmenuButton, { label, Icon: Icons.Menu.Font }), /* @__PURE__ */ React.createElement(Items, { className: "vds-font-style-items vds-menu-items" }, /* @__PURE__ */ React.createElement(DefaultFontFamilySubmenu, null), /* @__PURE__ */ React.createElement(DefaultFontSizeSubmenu, null), /* @__PURE__ */ React.createElement(DefaultTextColorSubmenu, null), /* @__PURE__ */ React.createElement(DefaultTextOpacitySubmenu, null), /* @__PURE__ */ React.createElement(DefaultTextShadowSubmenu, null), /* @__PURE__ */ React.createElement(DefaultTextBgSubmenu, null), /* @__PURE__ */ React.createElement(DefaultTextBgOpacitySubmenu, null), /* @__PURE__ */ React.createElement(DefaultDisplayBgSubmenu, null), /* @__PURE__ */ React.createElement(DefaultDisplayBgOpacitySubmenu, null), /* @__PURE__ */ React.createElement(DefaultResetMenuItem, null))));
}
DefaultFontSubmenu.displayName = "DefaultFontSubmenu";
function DefaultFontFamilySubmenu() {
  return /* @__PURE__ */ React.createElement(
    DefaultFontSettingSubmenu,
    {
      label: "Font Family",
      options: FONT_FAMILY_OPTIONS,
      defaultValue: "pro-sans",
      cssVarName: "font-family",
      getCssVarValue: getFontFamilyCSSVarValue
    }
  );
}
function getFontFamilyCSSVarValue(value, player) {
  const fontVariant = value === "capitals" ? "small-caps" : "";
  player.el?.style.setProperty("--media-user-font-variant", fontVariant);
  return getFontFamily(value);
}
DefaultFontFamilySubmenu.displayName = "DefaultFontFamilySubmenu";
function DefaultFontSizeSubmenu() {
  return /* @__PURE__ */ React.createElement(
    DefaultFontSettingSubmenu,
    {
      label: "Font Size",
      options: FONT_SIZE_OPTIONS,
      defaultValue: "100%",
      cssVarName: "font-size",
      getCssVarValue: percentToRatio
    }
  );
}
DefaultFontSizeSubmenu.displayName = "DefaultFontSizeSubmenu";
function DefaultTextColorSubmenu() {
  return /* @__PURE__ */ React.createElement(
    DefaultFontSettingSubmenu,
    {
      label: "Text Color",
      options: COLOR_OPTIONS,
      defaultValue: "white",
      cssVarName: "text-color",
      getCssVarValue: (value) => {
        return `rgb(${toRGB(value)} / var(--media-user-text-opacity, 1))`;
      }
    }
  );
}
DefaultTextColorSubmenu.displayName = "DefaultTextColorSubmenu";
function DefaultTextOpacitySubmenu() {
  return /* @__PURE__ */ React.createElement(
    DefaultFontSettingSubmenu,
    {
      label: "Text Opacity",
      options: OPACITY_OPTIONS,
      defaultValue: "100%",
      cssVarName: "text-opacity",
      getCssVarValue: percentToRatio
    }
  );
}
DefaultTextOpacitySubmenu.displayName = "DefaultTextOpacitySubmenu";
function DefaultTextShadowSubmenu() {
  return /* @__PURE__ */ React.createElement(
    DefaultFontSettingSubmenu,
    {
      label: "Text Shadow",
      options: TEXT_SHADOW_OPTIONS,
      defaultValue: "none",
      cssVarName: "text-shadow",
      getCssVarValue: getTextShadowCssVarValue
    }
  );
}
DefaultTextShadowSubmenu.displayName = "DefaultTextShadowSubmenu";
function DefaultTextBgSubmenu() {
  return /* @__PURE__ */ React.createElement(
    DefaultFontSettingSubmenu,
    {
      label: "Background Color",
      options: COLOR_OPTIONS,
      defaultValue: "black",
      cssVarName: "text-bg",
      getCssVarValue: (value) => {
        return `rgb(${toRGB(value)} / var(--media-user-text-bg-opacity, 1))`;
      }
    }
  );
}
DefaultTextBgSubmenu.displayName = "DefaultTextBgSubmenu";
function DefaultTextBgOpacitySubmenu() {
  return /* @__PURE__ */ React.createElement(
    DefaultFontSettingSubmenu,
    {
      label: "Background Opacity",
      options: OPACITY_OPTIONS,
      defaultValue: "100%",
      cssVarName: "text-bg-opacity",
      getCssVarValue: percentToRatio
    }
  );
}
DefaultTextBgOpacitySubmenu.displayName = "DefaultTextBgOpacitySubmenu";
function DefaultDisplayBgSubmenu() {
  return /* @__PURE__ */ React.createElement(
    DefaultFontSettingSubmenu,
    {
      label: "Display Background Color",
      options: COLOR_OPTIONS,
      defaultValue: "black",
      cssVarName: "display-bg",
      getCssVarValue: (value) => {
        return `rgb(${toRGB(value)} / var(--media-user-display-bg-opacity, 1))`;
      }
    }
  );
}
DefaultDisplayBgSubmenu.displayName = "DefaultDisplayBgSubmenu";
function DefaultDisplayBgOpacitySubmenu() {
  return /* @__PURE__ */ React.createElement(
    DefaultFontSettingSubmenu,
    {
      label: "Display Background Opacity",
      options: OPACITY_OPTIONS,
      defaultValue: "0%",
      cssVarName: "display-bg-opacity",
      getCssVarValue: percentToRatio
    }
  );
}
DefaultDisplayBgOpacitySubmenu.displayName = "DefaultDisplayBgOpacitySubmenu";
function DefaultFontSettingSubmenu({
  label,
  options,
  cssVarName,
  getCssVarValue,
  defaultValue
}) {
  const player = useMediaPlayer(), radioOptions = createRadioOptions(options), key = `${label.toLowerCase().replace(/\s/g, "-")}`, { translations } = React.useContext(DefaultLayoutContext), translatedLabel = useDefaultLayoutWord(label), resets = React.useContext(FontResetContext);
  const [value, setValue] = React.useState(defaultValue);
  const hint = React.useMemo(() => {
    const label2 = radioOptions.find((radio) => radio.value === value)?.label || "";
    return i18n(translations, label2);
  }, [value, radioOptions]);
  const onChange = React.useCallback((newValue) => {
    setValue(newValue);
    localStorage.setItem(`vds-player:${key}`, newValue);
    player?.el?.style.setProperty(
      `--media-user-${cssVarName}`,
      getCssVarValue?.(newValue, player) ?? newValue
    );
  }, []);
  const onReset = React.useCallback(() => {
    setValue(defaultValue);
  }, []);
  React.useEffect(() => {
    const savedValue = localStorage.getItem(`vds-player:${key}`);
    if (savedValue)
      onChange(savedValue);
    resets.all.add(onReset);
    return () => {
      resets.all.delete(onReset);
    };
  }, []);
  function onOpen() {
    resets.current = onReset;
  }
  function onClose() {
    resets.current = void 0;
  }
  return /* @__PURE__ */ React.createElement(Root$1, { className: `vds-${key}-menu vds-menu`, onOpen, onClose }, /* @__PURE__ */ React.createElement(DefaultSubmenuButton, { label: translatedLabel, hint }), /* @__PURE__ */ React.createElement(Items, { className: "vds-menu-items" }, /* @__PURE__ */ React.createElement(DefaultMenuRadioGroup, { value, options: radioOptions, onChange })));
}
DefaultFontSettingSubmenu.displayName = "DefaultFontSettingSubmenu";
function DefaultResetMenuItem() {
  const resetText = useDefaultLayoutWord("Reset"), resets = React.useContext(FontResetContext);
  function onClick() {
    resets.current ? resets.current() : resets.all.forEach((reset) => reset());
  }
  return /* @__PURE__ */ React.createElement("button", { className: "vds-menu-button", role: "menuitem", onClick }, /* @__PURE__ */ React.createElement("span", { className: "vds-menu-button-label" }, resetText));
}
DefaultResetMenuItem.displayName = "DefaultResetMenuItem";
function percentToRatio(value) {
  return (parseInt(value) / 100).toString();
}
function toRGB(color) {
  switch (color) {
    case "white":
      return "255 255 255";
    case "yellow":
      return "255 255 0";
    case "green":
      return "0 128 0";
    case "cyan":
      return "0 255 255";
    case "blue":
      return "0 0 255";
    case "magenta":
      return "255 0 255";
    case "red":
      return "255 0 0";
    case "black":
      return "0 0 0";
  }
}
function getFontFamily(value) {
  switch (value) {
    case "mono-serif":
      return '"Courier New", Courier, "Nimbus Mono L", "Cutive Mono", monospace';
    case "mono-sans":
      return '"Deja Vu Sans Mono", "Lucida Console", Monaco, Consolas, "PT Mono", monospace';
    case "pro-sans":
      return 'Roboto, "Arial Unicode Ms", Arial, Helvetica, Verdana, "PT Sans Caption", sans-serif';
    case "casual":
      return '"Comic Sans MS", Impact, Handlee, fantasy';
    case "cursive":
      return '"Monotype Corsiva", "URW Chancery L", "Apple Chancery", "Dancing Script", cursive';
    case "capitals":
      return '"Arial Unicode Ms", Arial, Helvetica, Verdana, "Marcellus SC", sans-serif + font-variant=small-caps';
    default:
      return '"Times New Roman", Times, Georgia, Cambria, "PT Serif Caption", serif';
  }
}
function getTextShadowCssVarValue(value) {
  switch (value) {
    case "drop shadow":
      return "rgb(34, 34, 34) 1.86389px 1.86389px 2.79583px, rgb(34, 34, 34) 1.86389px 1.86389px 3.72778px, rgb(34, 34, 34) 1.86389px 1.86389px 4.65972px";
    case "raised":
      return "rgb(34, 34, 34) 1px 1px, rgb(34, 34, 34) 2px 2px";
    case "depressed":
      return "rgb(204, 204, 204) 1px 1px, rgb(34, 34, 34) -1px -1px";
    case "outline":
      return "rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px";
    default:
      return "";
  }
}

function useDefaultAudioLayoutSlots() {
  return React.useContext(DefaultLayoutContext).slots;
}
function useDefaultVideoLayoutSlots() {
  return React.useContext(DefaultLayoutContext).slots;
}
function slot(slots, name, defaultValue) {
  const slot2 = slots?.[name], capitalizedName = uppercaseFirstChar(name);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, slots?.[`before${capitalizedName}`], isUndefined(slot2) ? defaultValue : slot2, slots?.[`after${capitalizedName}`]);
}

function DefaultTooltip({ content, placement, children }) {
  const { showTooltipDelay } = useDefaultLayoutContext();
  return /* @__PURE__ */ React.createElement(Root$2, { showDelay: showTooltipDelay }, /* @__PURE__ */ React.createElement(Trigger, { asChild: true }, children), /* @__PURE__ */ React.createElement(Content, { className: "vds-tooltip-content", placement }, content));
}
DefaultTooltip.displayName = "DefaultTooltip";
function DefaultAirPlayButton({ tooltip }) {
  const { icons: Icons } = useDefaultLayoutContext(), airPlayText = useDefaultLayoutWord("AirPlay"), $state = useMediaState("remotePlaybackState"), stateText = useDefaultLayoutWord(uppercaseFirstChar($state)), label = `${airPlayText} ${stateText}`, Icon = ($state === "connecting" ? Icons.AirPlayButton.Connecting : $state === "connected" ? Icons.AirPlayButton.Connected : null) ?? Icons.AirPlayButton.Default;
  return /* @__PURE__ */ React.createElement(DefaultTooltip, { content: airPlayText, placement: tooltip }, /* @__PURE__ */ React.createElement(AirPlayButton, { className: "vds-airplay-button vds-button", "aria-label": label }, /* @__PURE__ */ React.createElement(Icon, { className: "vds-icon" })));
}
DefaultAirPlayButton.displayName = "DefaultAirPlayButton";
function DefaultGoogleCastButton({ tooltip }) {
  const { icons: Icons } = useDefaultLayoutContext(), googleCastText = useDefaultLayoutWord("Google Cast"), $state = useMediaState("remotePlaybackState"), stateText = useDefaultLayoutWord(uppercaseFirstChar($state)), label = `${googleCastText} ${stateText}`, Icon = ($state === "connecting" ? Icons.GoogleCastButton.Connecting : $state === "connected" ? Icons.GoogleCastButton.Connected : null) ?? Icons.GoogleCastButton.Default;
  return /* @__PURE__ */ React.createElement(DefaultTooltip, { content: googleCastText, placement: tooltip }, /* @__PURE__ */ React.createElement(GoogleCastButton, { className: "vds-google-cast-button vds-button", "aria-label": label }, /* @__PURE__ */ React.createElement(Icon, { className: "vds-icon" })));
}
DefaultGoogleCastButton.displayName = "DefaultGoogleCastButton";
function DefaultPlayButton({ tooltip }) {
  const { icons: Icons } = useDefaultLayoutContext(), playText = useDefaultLayoutWord("Play"), pauseText = useDefaultLayoutWord("Pause"), $paused = useMediaState("paused"), $ended = useMediaState("ended");
  return /* @__PURE__ */ React.createElement(DefaultTooltip, { content: $paused ? playText : pauseText, placement: tooltip }, /* @__PURE__ */ React.createElement(PlayButton, { className: "vds-play-button vds-button", "aria-label": playText }, $ended ? /* @__PURE__ */ React.createElement(Icons.PlayButton.Replay, { className: "vds-icon" }) : $paused ? /* @__PURE__ */ React.createElement(Icons.PlayButton.Play, { className: "vds-icon" }) : /* @__PURE__ */ React.createElement(Icons.PlayButton.Pause, { className: "vds-icon" })));
}
DefaultPlayButton.displayName = "DefaultPlayButton";
const DefaultMuteButton = React.forwardRef(
  ({ tooltip }, forwardRef) => {
    const { icons: Icons } = useDefaultLayoutContext(), muteText = useDefaultLayoutWord("Mute"), unmuteText = useDefaultLayoutWord("Unmute"), $muted = useMediaState("muted"), $volume = useMediaState("volume");
    return /* @__PURE__ */ React.createElement(DefaultTooltip, { content: $muted ? unmuteText : muteText, placement: tooltip }, /* @__PURE__ */ React.createElement(MuteButton, { className: "vds-mute-button vds-button", "aria-label": muteText, ref: forwardRef }, $muted || $volume == 0 ? /* @__PURE__ */ React.createElement(Icons.MuteButton.Mute, { className: "vds-icon" }) : $volume < 0.5 ? /* @__PURE__ */ React.createElement(Icons.MuteButton.VolumeLow, { className: "vds-icon" }) : /* @__PURE__ */ React.createElement(Icons.MuteButton.VolumeHigh, { className: "vds-icon" })));
  }
);
DefaultMuteButton.displayName = "DefaultMuteButton";
function DefaultCaptionButton({ tooltip }) {
  const { icons: Icons } = useDefaultLayoutContext(), captionsText = useDefaultLayoutWord("Captions"), onText = useDefaultLayoutWord("Closed-Captions On"), offText = useDefaultLayoutWord("Closed-Captions Off"), $track = useMediaState("textTrack"), isOn = $track && isTrackCaptionKind($track);
  return /* @__PURE__ */ React.createElement(DefaultTooltip, { content: isOn ? onText : offText, placement: tooltip }, /* @__PURE__ */ React.createElement(CaptionButton, { className: "vds-caption-button vds-button", "aria-label": captionsText }, isOn ? /* @__PURE__ */ React.createElement(Icons.CaptionButton.On, { className: "vds-icon" }) : /* @__PURE__ */ React.createElement(Icons.CaptionButton.Off, { className: "vds-icon" })));
}
DefaultCaptionButton.displayName = "DefaultCaptionButton";
function DefaultPIPButton({ tooltip }) {
  const { icons: Icons } = useDefaultLayoutContext(), pipText = useDefaultLayoutWord("PiP"), enterText = useDefaultLayoutWord("Enter PiP"), exitText = useDefaultLayoutWord("Exit PiP"), $pip = useMediaState("pictureInPicture");
  return /* @__PURE__ */ React.createElement(DefaultTooltip, { content: $pip ? exitText : enterText, placement: tooltip }, /* @__PURE__ */ React.createElement(PIPButton, { className: "vds-pip-button vds-button", "aria-label": pipText }, $pip ? /* @__PURE__ */ React.createElement(Icons.PIPButton.Exit, { className: "vds-icon" }) : /* @__PURE__ */ React.createElement(Icons.PIPButton.Enter, { className: "vds-icon" })));
}
DefaultPIPButton.displayName = "DefaultPIPButton";
function DefaultFullscreenButton({ tooltip }) {
  const { icons: Icons } = useDefaultLayoutContext(), fullscreenText = useDefaultLayoutWord("Fullscreen"), enterText = useDefaultLayoutWord("Enter Fullscreen"), exitText = useDefaultLayoutWord("Exit Fullscreen"), $fullscreen = useMediaState("fullscreen");
  return /* @__PURE__ */ React.createElement(DefaultTooltip, { content: $fullscreen ? exitText : enterText, placement: tooltip }, /* @__PURE__ */ React.createElement(FullscreenButton, { className: "vds-fullscreen-button vds-button", "aria-label": fullscreenText }, $fullscreen ? /* @__PURE__ */ React.createElement(Icons.FullscreenButton.Exit, { className: "vds-icon" }) : /* @__PURE__ */ React.createElement(Icons.FullscreenButton.Enter, { className: "vds-icon" })));
}
DefaultFullscreenButton.displayName = "DefaultFullscreenButton";
function DefaultSeekButton({
  backward,
  tooltip
}) {
  const { icons: Icons, seekStep } = useDefaultLayoutContext(), seekForwardText = useDefaultLayoutWord("Seek Forward"), seekBackwardText = useDefaultLayoutWord("Seek Backward"), seconds = (backward ? -1 : 1) * seekStep, label = seconds >= 0 ? seekForwardText : seekBackwardText;
  return /* @__PURE__ */ React.createElement(DefaultTooltip, { content: label, placement: tooltip }, /* @__PURE__ */ React.createElement(SeekButton, { className: "vds-seek-button vds-button", seconds, "aria-label": label }, seconds >= 0 ? /* @__PURE__ */ React.createElement(Icons.SeekButton.Forward, { className: "vds-icon" }) : /* @__PURE__ */ React.createElement(Icons.SeekButton.Backward, { className: "vds-icon" })));
}
DefaultSeekButton.displayName = "DefaultSeekButton";
function DefaultVolumeSlider(props) {
  const label = useDefaultLayoutWord("Volume");
  return /* @__PURE__ */ React.createElement(Root$3, { className: "vds-volume-slider vds-slider", "aria-label": label, ...props }, /* @__PURE__ */ React.createElement(Track, { className: "vds-slider-track" }), /* @__PURE__ */ React.createElement(TrackFill, { className: "vds-slider-track-fill vds-slider-track" }), /* @__PURE__ */ React.createElement(Thumb, { className: "vds-slider-thumb" }), /* @__PURE__ */ React.createElement(Preview, { className: "vds-slider-preview", noClamp: true }, /* @__PURE__ */ React.createElement(Value, { className: "vds-slider-value" })));
}
DefaultVolumeSlider.displayName = "DefaultVolumeSlider";
function DefaultTimeSlider() {
  const [instance, setInstance] = React.useState(null), [width, setWidth] = React.useState(0), $src = useMediaState("currentSrc"), { thumbnails, sliderChaptersMinWidth, disableTimeSlider, seekStep, noScrubGesture } = useDefaultLayoutContext(), label = useDefaultLayoutWord("Seek"), $RemotionSliderThumbnail = useSignal(RemotionSliderThumbnail);
  const onResize = React.useCallback(() => {
    const el = instance?.el;
    el && setWidth(el.clientWidth);
  }, [instance]);
  useResizeObserver(instance?.el, onResize);
  return /* @__PURE__ */ React.createElement(
    Root$4,
    {
      className: "vds-time-slider vds-slider",
      "aria-label": label,
      disabled: disableTimeSlider,
      noSwipeGesture: noScrubGesture,
      keyStep: seekStep,
      ref: setInstance
    },
    /* @__PURE__ */ React.createElement(
      Chapters,
      {
        className: "vds-slider-chapters",
        disabled: width < sliderChaptersMinWidth
      },
      (cues, forwardRef) => cues.map((cue) => /* @__PURE__ */ React.createElement("div", { className: "vds-slider-chapter", key: cue.startTime, ref: forwardRef }, /* @__PURE__ */ React.createElement(Track, { className: "vds-slider-track" }), /* @__PURE__ */ React.createElement(TrackFill, { className: "vds-slider-track-fill vds-slider-track" }), /* @__PURE__ */ React.createElement(Progress, { className: "vds-slider-progress vds-slider-track" })))
    ),
    /* @__PURE__ */ React.createElement(Thumb, { className: "vds-slider-thumb" }),
    /* @__PURE__ */ React.createElement(Preview, { className: "vds-slider-preview" }, thumbnails ? /* @__PURE__ */ React.createElement(
      Thumbnail.Root,
      {
        src: thumbnails,
        className: "vds-slider-thumbnail vds-thumbnail"
      },
      /* @__PURE__ */ React.createElement(Thumbnail.Img, null)
    ) : $RemotionSliderThumbnail && isRemotionSource($src) ? /* @__PURE__ */ React.createElement($RemotionSliderThumbnail, { className: "vds-slider-thumbnail vds-thumbnail" }) : null, /* @__PURE__ */ React.createElement(ChapterTitle, { className: "vds-slider-chapter-title" }), /* @__PURE__ */ React.createElement(Value$1, { className: "vds-slider-value" }))
  );
}
DefaultTimeSlider.displayName = "DefaultTimeSlider";
function DefaultTitle() {
  return /* @__PURE__ */ React.createElement(Title, { className: "vds-title" });
}
DefaultTitle.displayName = "DefaultTitle";
function DefaultChapterTitle() {
  return /* @__PURE__ */ React.createElement(ChapterTitle$1, { className: "vds-chapter-title" });
}
DefaultChapterTitle.displayName = "DefaultChapterTitle";
function DefaultLiveButton() {
  const $live = useMediaState("live"), label = useDefaultLayoutWord("Skip To Live"), liveText = useDefaultLayoutWord("LIVE");
  return $live ? /* @__PURE__ */ React.createElement(LiveButton, { className: "vds-live-button", "aria-label": label }, /* @__PURE__ */ React.createElement("span", { className: "vds-live-button-text" }, liveText)) : null;
}
DefaultLiveButton.displayName = "DefaultLiveButton";
function DefaultTimeGroup({ slots }) {
  const $duration = useMediaState("duration");
  if (!$duration)
    return null;
  return /* @__PURE__ */ React.createElement("div", { className: "vds-time-group" }, slot(slots, "currentTime", /* @__PURE__ */ React.createElement(Time, { className: "vds-time", type: "current" })), slot(slots, "timeSeparator", /* @__PURE__ */ React.createElement("div", { className: "vds-time-divider" }, "/")), slot(slots, "endTime", /* @__PURE__ */ React.createElement(Time, { className: "vds-time", type: "duration" })));
}
DefaultTimeGroup.displayName = "DefaultTimeGroup";
function DefaultControlsSpacer() {
  return /* @__PURE__ */ React.createElement("div", { className: "vds-controls-spacer" });
}
DefaultControlsSpacer.displayName = "DefaultControlsSpacer";
function DefaultTimeInfo({ slots }) {
  const $live = useMediaState("live");
  return $live ? slot(slots, "liveButton", /* @__PURE__ */ React.createElement(DefaultLiveButton, null)) : /* @__PURE__ */ React.createElement(DefaultTimeGroup, { slots });
}
DefaultTimeInfo.displayName = "DefaultTimeInfo";
function DefaultTimeInvert({ slots }) {
  const $live = useMediaState("live"), $duration = useMediaState("duration");
  return $live ? slot(slots, "liveButton", /* @__PURE__ */ React.createElement(DefaultLiveButton, null)) : slot(
    slots,
    "endTime",
    $duration ? /* @__PURE__ */ React.createElement(Time, { className: "vds-time", type: "current", toggle: true, remainder: true }) : null
  );
}
DefaultTimeInvert.displayName = "DefaultTimeInvert";
function DefaultChaptersMenu({ tooltip, placement, portalClass }) {
  const {
    showMenuDelay,
    noModal,
    isSmallLayout,
    icons: Icons,
    menuGroup
  } = useDefaultLayoutContext(), chaptersText = useDefaultLayoutWord("Chapters"), options = useChapterOptions(), disabled = !options.length, { thumbnails } = useDefaultLayoutContext(), $src = useMediaState("currentSrc"), $viewType = useMediaState("viewType"), $offset = !isSmallLayout && menuGroup === "bottom" && $viewType === "video" ? 26 : 0, $RemotionThumbnail = useSignal(RemotionThumbnail);
  const Content = /* @__PURE__ */ React.createElement(
    Items,
    {
      className: "vds-chapters-menu-items vds-menu-items",
      placement,
      offset: $offset
    },
    /* @__PURE__ */ React.createElement(
      Root,
      {
        className: "vds-chapters-radio-group vds-radio-group",
        value: options.selectedValue,
        "data-thumbnails": thumbnails ? "" : null
      },
      options.map(
        ({ cue, label, value, startTimeText, durationText, select, setProgressVar }) => /* @__PURE__ */ React.createElement(
          Item,
          {
            className: "vds-chapter-radio vds-radio",
            value,
            key: value,
            onSelect: select,
            ref: setProgressVar
          },
          thumbnails ? /* @__PURE__ */ React.createElement(Root$5, { src: thumbnails, className: "vds-thumbnail", time: cue.startTime }, /* @__PURE__ */ React.createElement(Img, null)) : $RemotionThumbnail && isRemotionSource($src) ? /* @__PURE__ */ React.createElement($RemotionThumbnail, { className: "vds-thumbnail", frame: cue.startTime * $src.fps }) : null,
          /* @__PURE__ */ React.createElement("div", { className: "vds-chapter-radio-content" }, /* @__PURE__ */ React.createElement("span", { className: "vds-chapter-radio-label" }, label), /* @__PURE__ */ React.createElement("span", { className: "vds-chapter-radio-start-time" }, startTimeText), /* @__PURE__ */ React.createElement("span", { className: "vds-chapter-radio-duration" }, durationText))
        )
      )
    )
  );
  return /* @__PURE__ */ React.createElement(Root$1, { className: "vds-chapters-menu vds-menu", showDelay: showMenuDelay }, /* @__PURE__ */ React.createElement(DefaultTooltip, { content: chaptersText, placement: tooltip }, /* @__PURE__ */ React.createElement(
    Button,
    {
      className: "vds-menu-button vds-button",
      disabled,
      "aria-label": chaptersText
    },
    /* @__PURE__ */ React.createElement(Icons.Menu.Chapters, { className: "vds-icon" })
  )), noModal || !isSmallLayout ? Content : /* @__PURE__ */ React.createElement(
    Portal,
    {
      className: portalClass,
      disabled: "fullscreen",
      "data-size": isSmallLayout ? "sm" : null
    },
    Content
  ));
}
DefaultChaptersMenu.displayName = "DefaultChaptersMenu";
function DefaultSettingsMenu({ tooltip, placement, portalClass, slots }) {
  const { $state } = useMediaContext(), { showMenuDelay, icons: Icons, isSmallLayout, menuGroup, noModal } = useDefaultLayoutContext(), settingsText = useDefaultLayoutWord("Settings"), $viewType = useMediaState("viewType"), $offset = !isSmallLayout && menuGroup === "bottom" && $viewType === "video" ? 26 : 0, $$hasMenuItems = createComputed(() => {
    const { canSetPlaybackRate, canSetQuality, qualities, audioTracks, hasCaptions } = $state;
    return canSetPlaybackRate() || canSetQuality() && qualities().length || audioTracks().length || hasCaptions();
  }), $hasMenuItems = useSignal($$hasMenuItems);
  if (!$hasMenuItems)
    return null;
  const Content = /* @__PURE__ */ React.createElement(
    Items,
    {
      className: "vds-settings-menu-items vds-menu-items",
      placement,
      offset: $offset
    },
    slot(slots, "settingsMenuStartItems", null),
    /* @__PURE__ */ React.createElement(DefaultAudioSubmenu, null),
    /* @__PURE__ */ React.createElement(DefaultSpeedSubmenu, null),
    /* @__PURE__ */ React.createElement(DefaultQualitySubmenu, null),
    /* @__PURE__ */ React.createElement(DefaultCaptionSubmenu, null),
    /* @__PURE__ */ React.createElement(DefaultFontSubmenu, null),
    slot(slots, "settingsMenuEndItems", null)
  );
  return /* @__PURE__ */ React.createElement(Root$1, { className: "vds-settings-menu vds-menu", showDelay: showMenuDelay }, /* @__PURE__ */ React.createElement(DefaultTooltip, { content: settingsText, placement: tooltip }, /* @__PURE__ */ React.createElement(Button, { className: "vds-menu-button vds-button", "aria-label": settingsText }, /* @__PURE__ */ React.createElement(Icons.Menu.Settings, { className: "vds-icon vds-rotate-icon" }))), noModal || !isSmallLayout ? Content : /* @__PURE__ */ React.createElement(
    Portal,
    {
      className: portalClass,
      disabled: "fullscreen",
      "data-size": isSmallLayout ? "sm" : null
    },
    Content
  ));
}
DefaultSettingsMenu.displayName = "DefaultSettingsMenu";
function DefaultAudioSubmenu() {
  const { icons: Icons } = useDefaultLayoutContext(), label = useDefaultLayoutWord("Audio"), defaultText = useDefaultLayoutWord("Default"), $track = useMediaState("audioTrack"), options = useAudioOptions();
  return /* @__PURE__ */ React.createElement(Root$1, { className: "vds-audio-menu vds-menu" }, /* @__PURE__ */ React.createElement(
    DefaultSubmenuButton,
    {
      label,
      hint: $track?.label ?? defaultText,
      disabled: options.disabled,
      Icon: Icons.Menu.Audio
    }
  ), /* @__PURE__ */ React.createElement(Items, { className: "vds-menu-items" }, /* @__PURE__ */ React.createElement(
    Root,
    {
      className: "vds-audio-radio-group vds-radio-group",
      value: options.selectedValue
    },
    options.map(({ label: label2, value, select }) => /* @__PURE__ */ React.createElement(
      Item,
      {
        className: "vds-audio-radio vds-radio",
        value,
        onSelect: select,
        key: value
      },
      /* @__PURE__ */ React.createElement("div", { className: "vds-radio-check" }),
      /* @__PURE__ */ React.createElement("span", { className: "vds-radio-label" }, label2)
    ))
  )));
}
DefaultAudioSubmenu.displayName = "DefaultAudioSubmenu";
function DefaultSpeedSubmenu() {
  const { icons: Icons, playbackRates } = useDefaultLayoutContext(), label = useDefaultLayoutWord("Speed"), normalText = useDefaultLayoutWord("Normal"), options = usePlaybackRateOptions({
    normalLabel: normalText,
    rates: playbackRates
  }), hint = options.selectedValue === "1" ? normalText : options.selectedValue + "x";
  return /* @__PURE__ */ React.createElement(Root$1, { className: "vds-speed-menu vds-menu" }, /* @__PURE__ */ React.createElement(
    DefaultSubmenuButton,
    {
      label,
      hint,
      disabled: options.disabled,
      Icon: Icons.Menu.Speed
    }
  ), /* @__PURE__ */ React.createElement(Items, { className: "vds-menu-items" }, /* @__PURE__ */ React.createElement(
    Root,
    {
      className: "vds-speed-radio-group vds-radio-group",
      value: options.selectedValue
    },
    options.map(({ label: label2, value, select }) => /* @__PURE__ */ React.createElement(
      Item,
      {
        className: "vds-speed-radio vds-radio",
        value,
        onSelect: select,
        key: value
      },
      /* @__PURE__ */ React.createElement("div", { className: "vds-radio-check" }),
      /* @__PURE__ */ React.createElement("span", { className: "vds-radio-label" }, label2)
    ))
  )));
}
DefaultSpeedSubmenu.displayName = "DefaultSpeedSubmenu";
function DefaultQualitySubmenu() {
  const { hideQualityBitrate, icons: Icons } = useDefaultLayoutContext(), label = useDefaultLayoutWord("Quality"), autoText = useDefaultLayoutWord("Auto"), options = useVideoQualityOptions({ auto: autoText, sort: "descending" }), currentQuality = options.selectedQuality?.height, hint = options.selectedValue !== "auto" && currentQuality ? `${currentQuality}p` : `${autoText}${currentQuality ? ` (${currentQuality}p)` : ""}`;
  return /* @__PURE__ */ React.createElement(Root$1, { className: "vds-quality-menu vds-menu" }, /* @__PURE__ */ React.createElement(
    DefaultSubmenuButton,
    {
      label,
      hint,
      disabled: options.disabled,
      Icon: Icons.Menu.Quality
    }
  ), /* @__PURE__ */ React.createElement(Items, { className: "vds-menu-items" }, /* @__PURE__ */ React.createElement(
    Root,
    {
      className: "vds-quality-radio-group vds-radio-group",
      value: options.selectedValue
    },
    options.map(({ label: label2, value, bitrateText, select }) => /* @__PURE__ */ React.createElement(
      Item,
      {
        className: "vds-quality-radio vds-radio",
        value,
        onSelect: select,
        key: value
      },
      /* @__PURE__ */ React.createElement("div", { className: "vds-radio-check" }),
      /* @__PURE__ */ React.createElement("span", { className: "vds-radio-label" }, label2),
      !hideQualityBitrate && bitrateText ? /* @__PURE__ */ React.createElement("span", { className: "vds-radio-hint" }, bitrateText) : null
    ))
  )));
}
DefaultQualitySubmenu.displayName = "DefaultQualitySubmenu";
function DefaultCaptionSubmenu() {
  const { icons: Icons } = useDefaultLayoutContext(), label = useDefaultLayoutWord("Captions"), offText = useDefaultLayoutWord("Off"), options = useCaptionOptions({ off: offText }), hint = options.selectedTrack?.label ?? offText;
  return /* @__PURE__ */ React.createElement(Root$1, { className: "vds-captions-menu vds-menu" }, /* @__PURE__ */ React.createElement(
    DefaultSubmenuButton,
    {
      label,
      hint,
      disabled: options.disabled,
      Icon: Icons.Menu.Captions
    }
  ), /* @__PURE__ */ React.createElement(Items, { className: "vds-menu-items" }, /* @__PURE__ */ React.createElement(
    Root,
    {
      className: "vds-captions-radio-group vds-radio-group",
      value: options.selectedValue
    },
    options.map(({ label: label2, value, select }) => /* @__PURE__ */ React.createElement(
      Item,
      {
        className: "vds-caption-radio vds-radio",
        value,
        onSelect: select,
        key: value
      },
      /* @__PURE__ */ React.createElement("div", { className: "vds-radio-check" }),
      /* @__PURE__ */ React.createElement("span", { className: "vds-radio-label" }, label2)
    ))
  )));
}
DefaultCaptionSubmenu.displayName = "DefaultCaptionSubmenu";

const MediaLayout$1 = createDefaultMediaLayout({
  type: "audio",
  smLayoutWhen({ width }) {
    return width < 576;
  },
  renderLayout: () => /* @__PURE__ */ React.createElement(AudioLayout, null)
});
function DefaultAudioLayout(props) {
  const [scrubbing, setScrubbing] = React.useState(false), $pointer = useMediaState("pointer");
  useLayoutName("audio");
  const onStartScrubbing = React.useCallback((event) => {
    const { target } = event, hasTimeSlider = !!(target instanceof HTMLElement && target.closest(".vds-time-slider"));
    if (!hasTimeSlider)
      return;
    event.nativeEvent.stopImmediatePropagation();
    setScrubbing(true);
  }, []);
  const onStopScrubbing = React.useCallback(() => {
    setScrubbing(false);
  }, []);
  React.useEffect(() => {
    if (scrubbing)
      return listenEvent(window, "pointerdown", onStopScrubbing);
  }, [scrubbing, onStopScrubbing]);
  return /* @__PURE__ */ React.createElement(
    MediaLayout$1,
    {
      ...props,
      "data-scrubbing": scrubbing ? "" : null,
      onPointerDown: scrubbing ? (e) => e.stopPropagation() : void 0,
      onPointerDownCapture: $pointer === "coarse" && !scrubbing ? onStartScrubbing : void 0
    }
  );
}
DefaultAudioLayout.displayName = "DefaultAudioLayout";
function AudioLayout() {
  const slots = useDefaultAudioLayoutSlots();
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Captions, { className: "vds-captions" }), /* @__PURE__ */ React.createElement(Root$6, { className: "vds-controls" }, /* @__PURE__ */ React.createElement(Group, { className: "vds-controls-group" }, slot(slots, "seekBackwardButton", /* @__PURE__ */ React.createElement(DefaultSeekButton, { backward: true, tooltip: "top start" })), slot(slots, "playButton", /* @__PURE__ */ React.createElement(DefaultPlayButton, { tooltip: "top center" })), slot(slots, "seekForwardButton", /* @__PURE__ */ React.createElement(DefaultSeekButton, { tooltip: "top center" })), /* @__PURE__ */ React.createElement(DefaultAudioTitle, null), slot(slots, "timeSlider", /* @__PURE__ */ React.createElement(DefaultTimeSlider, null)), /* @__PURE__ */ React.createElement(DefaultTimeInvert, null), /* @__PURE__ */ React.createElement(DefaultAudioVolume, null), slot(slots, "captionButton", /* @__PURE__ */ React.createElement(DefaultCaptionButton, { tooltip: "top center" })), /* @__PURE__ */ React.createElement(DefaultAudioMenus, { slots }))));
}
AudioLayout.displayName = "AudioLayout";
function DefaultAudioMenus({ slots }) {
  const { isSmallLayout, noModal } = React.useContext(DefaultLayoutContext), placement = noModal ? "top end" : !isSmallLayout ? "top end" : null;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, slot(
    slots,
    "chaptersMenu",
    /* @__PURE__ */ React.createElement(DefaultChaptersMenu, { tooltip: "top", placement, portalClass: "vds-audio-layout" })
  ), slot(
    slots,
    "settingsMenu",
    /* @__PURE__ */ React.createElement(
      DefaultSettingsMenu,
      {
        tooltip: "top end",
        placement,
        portalClass: "vds-audio-layout",
        slots
      }
    )
  ));
}
DefaultAudioMenus.displayName = "DefaultAudioMenus";
function DefaultAudioTitle() {
  const [rootEl, setRootEl] = React.useState(null), media = useMediaContext(), { translations } = useDefaultLayoutContext(), [isTextOverflowing, setIsTextOverflowing] = React.useState(false);
  const isContinued = createComputed(() => {
    const { started, currentTime } = media.$state;
    return started() || currentTime() > 0;
  });
  const $title = useSignal(
    createComputed(() => {
      const { title, ended } = media.$state;
      if (!title())
        return "";
      const word = ended() ? "Replay" : isContinued() ? "Continue" : "Play";
      return `${i18n(translations, word)}: ${title()}`;
    })
  );
  const chapterTitle = useChapterTitle(), $isContinued = useSignal(isContinued), $chapterTitle = $isContinued ? chapterTitle : "", isTransitionActive = useTransitionActive(rootEl);
  React.useEffect(() => {
    if (isTransitionActive && document.activeElement === document.body) {
      media.player.el?.focus();
    }
  }, []);
  const onResize = React.useCallback(() => {
    const el = rootEl, isOverflowing = !!el && !isTransitionActive && el.clientWidth < el.children[0].clientWidth;
    if (el)
      toggleClass(el, "vds-marquee", isOverflowing);
    setIsTextOverflowing(isOverflowing);
  }, [rootEl, isTransitionActive]);
  useResizeObserver(rootEl, onResize);
  return $title ? /* @__PURE__ */ React.createElement("span", { className: "vds-title", title: $title, ref: setRootEl }, /* @__PURE__ */ React.createElement(AudioTitle, { title: $title, chapterTitle: $chapterTitle }), isTextOverflowing && !isTransitionActive ? /* @__PURE__ */ React.createElement(AudioTitle, { title: $title, chapterTitle: $chapterTitle }) : null) : /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null);
}
DefaultAudioTitle.displayName = "DefaultAudioTitle";
function AudioTitle({ title, chapterTitle }) {
  const slots = useDefaultAudioLayoutSlots();
  return /* @__PURE__ */ React.createElement("span", { className: "vds-title-text" }, slot(slots, "title", title), slot(slots, "chapterTitle", /* @__PURE__ */ React.createElement("span", { className: "vds-chapter-title" }, chapterTitle)));
}
AudioTitle.displayName = "AudioTitle";
function DefaultAudioVolume() {
  const $pointer = useMediaState("pointer"), $muted = useMediaState("muted"), [rootEl, setRootEl] = React.useState(null), [triggerEl, setTriggerEl] = React.useState(null), [popperEl, setPopperEl] = React.useState(null), isRootActive = useActive(rootEl), hasMouseEnteredTrigger = useMouseEnter(triggerEl), slots = useDefaultAudioLayoutSlots();
  useRectCSSVars(rootEl, hasMouseEnteredTrigger ? triggerEl : null, "trigger");
  useRectCSSVars(rootEl, hasMouseEnteredTrigger ? popperEl : null, "popper");
  return $pointer === "coarse" && !$muted ? null : /* @__PURE__ */ React.createElement("div", { className: "vds-volume", "data-active": isRootActive ? "" : null, ref: setRootEl }, slot(slots, "muteButton", /* @__PURE__ */ React.createElement(DefaultMuteButton, { tooltip: "top center", ref: setTriggerEl })), /* @__PURE__ */ React.createElement("div", { className: "vds-volume-popup", ref: setPopperEl }, slot(slots, "volumeSlider", /* @__PURE__ */ React.createElement(DefaultVolumeSlider, { orientation: "vertical" }))));
}
DefaultAudioVolume.displayName = "DefaultAudioVolume";

const DefaultVideoKeyboardActionDisplay = React.forwardRef(({ icons: Icons, translations, ...props }, forwardRef) => {
  const [visible, setVisible] = React.useState(false), [Icon, setIcon] = React.useState(null), [count, setCount] = React.useState(0), $lastKeyboardAction = useMediaState("lastKeyboardAction");
  React.useEffect(() => {
    setCount((n) => n + 1);
  }, [$lastKeyboardAction]);
  const actionDataAttr = React.useMemo(() => {
    const action = $lastKeyboardAction?.action;
    return action && visible ? camelToKebabCase(action) : null;
  }, [visible, $lastKeyboardAction]);
  const className = React.useMemo(
    () => `vds-kb-action${!visible ? " hidden" : ""}${props.className ? ` ${props.className}` : ""}`,
    [visible]
  );
  const $$text = createComputed(getText), $text = useSignal($$text);
  const $$statusLabel = createComputed(() => getStatusLabel(translations), [translations]), $statusLabel = useSignal($$statusLabel);
  createEffect(() => {
    const Icon2 = getIcon(Icons);
    setIcon(() => Icon2);
  }, [Icons]);
  React.useEffect(() => {
    setVisible(!!$lastKeyboardAction);
    const id = setTimeout(() => setVisible(false), 500);
    return () => {
      setVisible(false);
      window.clearTimeout(id);
    };
  }, [$lastKeyboardAction]);
  return /* @__PURE__ */ React.createElement(
    Primitive.div,
    {
      ...props,
      className,
      "data-action": actionDataAttr,
      ref: forwardRef
    },
    /* @__PURE__ */ React.createElement("div", { className: "vds-kb-text-wrapper" }, /* @__PURE__ */ React.createElement("div", { className: "vds-kb-text" }, $text)),
    Icon ? /* @__PURE__ */ React.createElement("div", { className: "vds-kb-bezel", role: "status", "aria-label": $statusLabel, key: count }, /* @__PURE__ */ React.createElement("div", { className: "vds-kb-icon" }, /* @__PURE__ */ React.createElement(Icon, null))) : null
  );
});
DefaultVideoKeyboardActionDisplay.displayName = "DefaultVideoKeyboardActionDisplay";
function getText() {
  const { $state } = useContext(mediaContext), action = $state.lastKeyboardAction()?.action;
  switch (action) {
    case "toggleMuted":
      return $state.muted() ? "0%" : getVolumeText($state.volume());
    case "volumeUp":
    case "volumeDown":
      return getVolumeText($state.volume());
    default:
      return "";
  }
}
function getVolumeText(volume) {
  return `${Math.round(volume * 100)}%`;
}
function getIcon(Icons) {
  const { $state } = useContext(mediaContext), action = $state.lastKeyboardAction()?.action;
  switch (action) {
    case "togglePaused":
      return !$state.paused() ? Icons?.Play : Icons?.Pause;
    case "toggleMuted":
      return $state.muted() || $state.volume() === 0 ? Icons?.Mute : $state.volume() >= 0.5 ? Icons?.VolumeUp : Icons?.VolumeDown;
    case "toggleFullscreen":
      return $state.fullscreen() ? Icons?.EnterFullscreen : Icons?.ExitFullscreen;
    case "togglePictureInPicture":
      return $state.pictureInPicture() ? Icons?.EnterPiP : Icons?.ExitPiP;
    case "toggleCaptions":
      return $state.hasCaptions() ? $state.textTrack() ? Icons?.CaptionsOn : Icons?.CaptionsOff : null;
    case "volumeUp":
      return Icons?.VolumeUp;
    case "volumeDown":
      return Icons?.VolumeDown;
    case "seekForward":
      return Icons?.SeekForward;
    case "seekBackward":
      return Icons?.SeekBackward;
    default:
      return null;
  }
}
function getStatusLabel(translations) {
  const text = getStatusText(translations);
  return text ? i18n(translations, text) : null;
}
function getStatusText(translations) {
  const { $state } = useContext(mediaContext), action = $state.lastKeyboardAction()?.action;
  switch (action) {
    case "togglePaused":
      return !$state.paused() ? "Play" : "Pause";
    case "toggleFullscreen":
      return $state.fullscreen() ? "Enter Fullscreen" : "Exit Fullscreen";
    case "togglePictureInPicture":
      return $state.pictureInPicture() ? "Enter PiP" : "Exit PiP";
    case "toggleCaptions":
      return $state.textTrack() ? "Closed-Captions On" : "Closed-Captions Off";
    case "toggleMuted":
    case "volumeUp":
    case "volumeDown":
      return $state.muted() || $state.volume() === 0 ? "Mute" : `${Math.round($state.volume() * 100)}% ${i18n(translations, "Volume")}`;
    default:
      return null;
  }
}

const MediaLayout = createDefaultMediaLayout({
  type: "video",
  smLayoutWhen({ width, height }) {
    return width < 576 || height < 380;
  },
  renderLayout({ streamType, isSmallLayout, isLoadLayout }) {
    return isLoadLayout ? /* @__PURE__ */ React.createElement(DefaultVideoLoadLayout, null) : streamType === "unknown" ? /* @__PURE__ */ React.createElement(DefaultBufferingIndicator, null) : isSmallLayout ? /* @__PURE__ */ React.createElement(DefaultVideoSmallLayout, null) : /* @__PURE__ */ React.createElement(DefaultVideoLargeLayout, null);
  }
});
function DefaultVideoLayout(props) {
  useLayoutName("video");
  return /* @__PURE__ */ React.createElement(MediaLayout, { ...props });
}
DefaultVideoLayout.displayName = "DefaultVideoLayout";
function DefaultVideoLargeLayout() {
  const { menuGroup, noKeyboardActionDisplay, icons, translations } = React.useContext(DefaultLayoutContext), baseSlots = useDefaultVideoLayoutSlots(), slots = { ...baseSlots, ...baseSlots?.largeLayout };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DefaultVideoGestures, null), !noKeyboardActionDisplay && icons.KeyboardAction ? /* @__PURE__ */ React.createElement(
    DefaultVideoKeyboardActionDisplay,
    {
      icons: icons.KeyboardAction,
      translations
    }
  ) : null, slot(slots, "bufferingIndicator", /* @__PURE__ */ React.createElement(DefaultBufferingIndicator, null)), slot(slots, "captions", /* @__PURE__ */ React.createElement(Captions, { className: "vds-captions" })), /* @__PURE__ */ React.createElement(Root$6, { className: "vds-controls" }, /* @__PURE__ */ React.createElement(Group, { className: "vds-controls-group" }, slot(slots, "topControlsGroupStart", null), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), slot(slots, "topControlsGroupCenter", null), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), slot(slots, "topControlsGroupEnd", null), menuGroup === "top" && /* @__PURE__ */ React.createElement(DefaultVideoMenus, { slots })), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ React.createElement(Group, { className: "vds-controls-group" }, slot(slots, "centerControlsGroupStart", null), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), slot(slots, "centerControlsGroupCenter", null), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), slot(slots, "centerControlsGroupEnd", null)), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ React.createElement(Group, { className: "vds-controls-group" }, slot(slots, "timeSlider", /* @__PURE__ */ React.createElement(DefaultTimeSlider, null))), /* @__PURE__ */ React.createElement(Group, { className: "vds-controls-group" }, slot(slots, "playButton", /* @__PURE__ */ React.createElement(DefaultPlayButton, { tooltip: "top start" })), slot(slots, "muteButton", /* @__PURE__ */ React.createElement(DefaultMuteButton, { tooltip: "top" })), slot(slots, "volumeSlider", /* @__PURE__ */ React.createElement(DefaultVolumeSlider, null)), /* @__PURE__ */ React.createElement(DefaultTimeInfo, { slots }), slot(slots, "chapterTitle", /* @__PURE__ */ React.createElement(DefaultChapterTitle, null)), slot(slots, "captionButton", /* @__PURE__ */ React.createElement(DefaultCaptionButton, { tooltip: "top" })), menuGroup === "bottom" && /* @__PURE__ */ React.createElement(DefaultVideoMenus, { slots }), slot(slots, "airPlayButton", /* @__PURE__ */ React.createElement(DefaultAirPlayButton, { tooltip: "top" })), slot(slots, "googleCastButton", /* @__PURE__ */ React.createElement(DefaultGoogleCastButton, { tooltip: "top" })), slot(slots, "pipButton", /* @__PURE__ */ React.createElement(DefaultPIPButton, { tooltip: "top" })), slot(slots, "fullscreenButton", /* @__PURE__ */ React.createElement(DefaultFullscreenButton, { tooltip: "top end" })))));
}
DefaultVideoLargeLayout.displayName = "DefaultVideoLargeLayout";
function DefaultVideoSmallLayout() {
  const baseSlots = useDefaultVideoLayoutSlots(), slots = { ...baseSlots, ...baseSlots?.smallLayout };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DefaultVideoGestures, null), slot(slots, "bufferingIndicator", /* @__PURE__ */ React.createElement(DefaultBufferingIndicator, null)), slot(slots, "captions", /* @__PURE__ */ React.createElement(Captions, { className: "vds-captions" })), /* @__PURE__ */ React.createElement(Root$6, { className: "vds-controls" }, /* @__PURE__ */ React.createElement(Group, { className: "vds-controls-group" }, slot(slots, "topControlsGroupStart", null), slot(slots, "airPlayButton", /* @__PURE__ */ React.createElement(DefaultAirPlayButton, { tooltip: "top start" })), slot(slots, "googleCastButton", /* @__PURE__ */ React.createElement(DefaultGoogleCastButton, { tooltip: "top start" })), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), slot(slots, "topControlsGroupCenter", null), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), slot(slots, "captionButton", /* @__PURE__ */ React.createElement(DefaultCaptionButton, { tooltip: "bottom" })), /* @__PURE__ */ React.createElement(DefaultVideoMenus, { slots }), slot(slots, "muteButton", /* @__PURE__ */ React.createElement(DefaultMuteButton, { tooltip: "bottom end" })), slot(slots, "topControlsGroupEnd", null)), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ React.createElement(Group, { className: "vds-controls-group", style: { pointerEvents: "none" } }, slot(slots, "centerControlsGroupStart", null), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), slot(slots, "centerControlsGroupCenter", null), slot(slots, "playButton", /* @__PURE__ */ React.createElement(DefaultPlayButton, { tooltip: "top" })), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), slot(slots, "centerControlsGroupEnd", null)), /* @__PURE__ */ React.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ React.createElement(Group, { className: "vds-controls-group" }, /* @__PURE__ */ React.createElement(DefaultTimeInfo, { slots }), slot(slots, "chapterTitle", /* @__PURE__ */ React.createElement(DefaultChapterTitle, null)), slot(slots, "fullscreenButton", /* @__PURE__ */ React.createElement(DefaultFullscreenButton, { tooltip: "top end" }))), /* @__PURE__ */ React.createElement(Group, { className: "vds-controls-group" }, slot(slots, "timeSlider", /* @__PURE__ */ React.createElement(DefaultTimeSlider, null)))), slot(slots, "startDuration", /* @__PURE__ */ React.createElement(DefaultVideoStartDuration, null)));
}
DefaultVideoSmallLayout.displayName = "DefaultVideoSmallLayout";
function DefaultVideoStartDuration() {
  const $duration = useMediaState("duration");
  if ($duration === 0)
    return null;
  return /* @__PURE__ */ React.createElement("div", { className: "vds-start-duration" }, /* @__PURE__ */ React.createElement(Time, { className: "vds-time", type: "duration" }));
}
DefaultVideoStartDuration.displayName = "DefaultVideoStartDuration";
function DefaultVideoGestures() {
  const { noGestures } = React.useContext(DefaultLayoutContext);
  if (noGestures)
    return null;
  return /* @__PURE__ */ React.createElement("div", { className: "vds-gestures" }, /* @__PURE__ */ React.createElement(Gesture, { className: "vds-gesture", event: "pointerup", action: "toggle:paused" }), /* @__PURE__ */ React.createElement(Gesture, { className: "vds-gesture", event: "pointerup", action: "toggle:controls" }), /* @__PURE__ */ React.createElement(Gesture, { className: "vds-gesture", event: "dblpointerup", action: "toggle:fullscreen" }), /* @__PURE__ */ React.createElement(Gesture, { className: "vds-gesture", event: "dblpointerup", action: "seek:-10" }), /* @__PURE__ */ React.createElement(Gesture, { className: "vds-gesture", event: "dblpointerup", action: "seek:10" }));
}
DefaultVideoGestures.displayName = "DefaultVideoGestures";
function DefaultBufferingIndicator() {
  return /* @__PURE__ */ React.createElement("div", { className: "vds-buffering-indicator" }, /* @__PURE__ */ React.createElement(Root$7, { className: "vds-buffering-spinner" }, /* @__PURE__ */ React.createElement(Track$1, { className: "vds-buffering-track" }), /* @__PURE__ */ React.createElement(TrackFill$1, { className: "vds-buffering-track-fill" })));
}
DefaultBufferingIndicator.displayName = "DefaultBufferingIndicator";
function DefaultVideoMenus({ slots }) {
  const { isSmallLayout, noModal, menuGroup } = React.useContext(DefaultLayoutContext), side = menuGroup === "top" || isSmallLayout ? "bottom" : "top", tooltip = `${side} end`, placement = noModal ? `${side} end` : !isSmallLayout ? `${side} end` : null;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, slot(
    slots,
    "chaptersMenu",
    /* @__PURE__ */ React.createElement(
      DefaultChaptersMenu,
      {
        tooltip,
        placement,
        portalClass: "vds-video-layout"
      }
    )
  ), slot(
    slots,
    "settingsMenu",
    /* @__PURE__ */ React.createElement(
      DefaultSettingsMenu,
      {
        tooltip,
        placement,
        portalClass: "vds-video-layout",
        slots
      }
    )
  ));
}
DefaultVideoMenus.displayName = "DefaultVideoMenus";
function DefaultVideoLoadLayout() {
  const { isSmallLayout } = React.useContext(DefaultLayoutContext), baseSlots = useDefaultVideoLayoutSlots(), slots = { ...baseSlots, ...baseSlots?.[isSmallLayout ? "smallLayout" : "largeLayout"] };
  return /* @__PURE__ */ React.createElement("div", { className: "vds-load-container" }, slot(slots, "bufferingIndicator", /* @__PURE__ */ React.createElement(DefaultBufferingIndicator, null)), slot(slots, "loadButton", /* @__PURE__ */ React.createElement(DefaultPlayButton, { tooltip: "top" })));
}
DefaultVideoLoadLayout.displayName = "DefaultVideoLoadLayout";

export { DefaultTimeInfo as A, DefaultTimeInvert as B, DefaultChaptersMenu as C, DefaultVideoKeyboardActionDisplay as D, DefaultSettingsMenu as E, DefaultLayoutContext as a, useDefaultLayoutWord as b, DefaultAudioLayout as c, DefaultVideoLayout as d, DefaultVideoLargeLayout as e, DefaultVideoSmallLayout as f, DefaultVideoGestures as g, DefaultBufferingIndicator as h, i18n as i, DefaultTooltip as j, DefaultAirPlayButton as k, DefaultGoogleCastButton as l, DefaultPlayButton as m, DefaultMuteButton as n, DefaultCaptionButton as o, DefaultPIPButton as p, DefaultFullscreenButton as q, DefaultSeekButton as r, DefaultVolumeSlider as s, DefaultTimeSlider as t, useDefaultLayoutContext as u, DefaultTitle as v, DefaultChapterTitle as w, DefaultLiveButton as x, DefaultTimeGroup as y, DefaultControlsSpacer as z };
