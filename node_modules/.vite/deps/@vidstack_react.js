"use client";
import {
  ARIAKeyShortcuts,
  AUDIO_EXTENSIONS,
  AUDIO_TYPES,
  AirPlayButtonInstance,
  AudioProviderLoader,
  AudioRadioGroup,
  AudioTrackList,
  CaptionButtonInstance,
  CaptionsInstance,
  CaptionsRadioGroup,
  ChaptersRadioGroup,
  ControlsGroup,
  ControlsGroupInstance,
  ControlsInstance,
  DEFAULT_PLAYBACK_RATES,
  DOMEvent,
  FullscreenButtonInstance,
  FullscreenController,
  GestureInstance,
  GoogleCastButtonInstance,
  HLSProviderLoader,
  HLS_VIDEO_EXTENSIONS,
  HLS_VIDEO_TYPES,
  IS_SERVER,
  List,
  LiveButtonInstance,
  LocalMediaStorage,
  Logger,
  MEDIA_KEY_SHORTCUTS,
  MediaControls,
  MediaPlayerInstance,
  MediaProviderInstance,
  MediaRemoteControl,
  MenuButton,
  MenuButtonInstance,
  MenuInstance,
  MenuItem,
  MenuItemInstance,
  MenuItems,
  MenuItemsInstance,
  MenuPortal,
  MenuPortalInstance,
  MuteButtonInstance,
  PIPButtonInstance,
  PlayButtonInstance,
  PosterInstance,
  Primitive,
  QualityRadioGroup,
  Radio,
  RadioGroupInstance,
  RadioInstance,
  ScreenOrientationController,
  SeekButtonInstance,
  SliderChapters,
  SliderChaptersInstance,
  SliderController,
  SliderInstance,
  SliderPreview,
  SliderPreviewInstance,
  SliderThumbnail,
  SliderThumbnailInstance,
  SliderValue,
  SliderValueInstance,
  SliderVideo,
  SliderVideoInstance,
  SpeedRadioGroup,
  TextRenderers,
  TextTrack,
  TextTrackList,
  TextTrackSymbol,
  ThumbnailInstance,
  ThumbnailsLoader,
  TimeInstance,
  TimeRange,
  TimeSliderInstance,
  ToggleButtonInstance,
  TooltipContent,
  TooltipContentInstance,
  TooltipInstance,
  TooltipTrigger,
  TooltipTriggerInstance,
  VIDEO_EXTENSIONS,
  VIDEO_TYPES,
  VideoProviderLoader,
  VideoQualityList,
  VimeoProviderLoader,
  VolumeSliderInstance,
  YouTubeProviderLoader,
  appendTriggerEvent,
  canChangeVolume,
  canFullscreen,
  canGoogleCastSrc,
  canOrientScreen,
  canPlayHLSNatively,
  canRotateScreen,
  canUsePictureInPicture,
  canUseVideoPresentation,
  composeRefs,
  createDisposalBin,
  createReactComponent,
  effect,
  findActiveCue,
  findTriggerEvent,
  formatSpokenTime,
  formatTime,
  getTimeRangesEnd,
  getTimeRangesStart,
  hasTriggerEvent,
  isAudioProvider,
  isAudioSrc,
  isCueActive,
  isGoogleCastProvider,
  isHLSProvider,
  isHLSSrc,
  isHTMLAudioElement,
  isHTMLIFrameElement,
  isHTMLMediaElement,
  isHTMLVideoElement,
  isKeyboardClick,
  isKeyboardEvent,
  isMediaStream,
  isPointerEvent,
  isRemotionProvider,
  isString,
  isTrackCaptionKind,
  isVideoProvider,
  isVideoSrc,
  isVimeoProvider,
  isYouTubeProvider,
  listenEvent,
  mediaContext,
  mediaState,
  menuPortalContext,
  noop,
  parseJSONCaptionsFile,
  scoped,
  signal,
  sliderContext,
  sliderState,
  softResetMediaState,
  updateSliderPreviewPlacement,
  useMediaState,
  useMediaStore,
  usePlyrLayoutClasses,
  useReactContext,
  useReactScope,
  useSignal,
  useSignalRecord,
  useStateContext,
  walkTriggerEventChain,
  watchActiveTextTrack,
  watchCueTextChange
} from "./chunk-FTTYJTAR.js";
import {
  require_react_dom
} from "./chunk-T7VP4UGM.js";
import {
  require_react
} from "./chunk-KZA2ZXKF.js";
import {
  __toESM
} from "./chunk-LNEMQRCO.js";

// node_modules/@vidstack/react/dist/dev/vidstack.js
var React5 = __toESM(require_react());

// node_modules/@vidstack/react/dist/dev/chunks/vidstack-BhjICVce.js
var React = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
function useMediaContext() {
  return useReactContext(mediaContext);
}
var AirPlayButtonBridge = createReactComponent(AirPlayButtonInstance, {
  domEventsRegex: /^onMedia/
});
var AirPlayButton = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(AirPlayButtonBridge, { ...props }, (props2) => React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
AirPlayButton.displayName = "AirPlayButton";
var PlayButtonBridge = createReactComponent(PlayButtonInstance, {
  domEventsRegex: /^onMedia/
});
var PlayButton = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(PlayButtonBridge, { ...props }, (props2) => React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
PlayButton.displayName = "PlayButton";
var CaptionButtonBridge = createReactComponent(CaptionButtonInstance, {
  domEventsRegex: /^onMedia/
});
var CaptionButton = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(CaptionButtonBridge, { ...props }, (props2) => React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
CaptionButton.displayName = "CaptionButton";
var FullscreenButtonBridge = createReactComponent(FullscreenButtonInstance, {
  domEventsRegex: /^onMedia/
});
var FullscreenButton = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(FullscreenButtonBridge, { ...props }, (props2) => React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
FullscreenButton.displayName = "FullscreenButton";
var MuteButtonBridge = createReactComponent(MuteButtonInstance, {
  domEventsRegex: /^onMedia/
});
var MuteButton = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(MuteButtonBridge, { ...props }, (props2) => React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
MuteButton.displayName = "MuteButton";
var PIPButtonBridge = createReactComponent(PIPButtonInstance, {
  domEventsRegex: /^onMedia/
});
var PIPButton = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(PIPButtonBridge, { ...props }, (props2) => React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
PIPButton.displayName = "PIPButton";
var SeekButtonBridge = createReactComponent(SeekButtonInstance, {
  domEventsRegex: /^onMedia/
});
var SeekButton = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(SeekButtonBridge, { ...props }, (props2) => React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
SeekButton.displayName = "SeekButton";
var LiveButtonBridge = createReactComponent(LiveButtonInstance, {
  domEventsRegex: /^onMedia/
});
var LiveButton = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(LiveButtonBridge, { ...props }, (props2) => React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
LiveButton.displayName = "LiveButton";
var SliderValueBridge = createReactComponent(SliderValueInstance);
var SliderBridge = createReactComponent(SliderInstance, {
  events: [
    "onDragStart",
    "onDragEnd",
    "onDragValueChange",
    "onValueChange",
    "onPointerValueChange"
  ]
});
var Root$5 = React.forwardRef(({ children, ...props }, forwardRef5) => {
  return React.createElement(SliderBridge, { ...props, ref: forwardRef5 }, (props2) => React.createElement(Primitive.div, { ...props2 }, children));
});
Root$5.displayName = "Slider";
var Thumb = React.forwardRef((props, forwardRef5) => React.createElement(Primitive.div, { ...props, ref: forwardRef5 }));
Thumb.displayName = "SliderThumb";
var Track = React.forwardRef((props, forwardRef5) => React.createElement(Primitive.div, { ...props, ref: forwardRef5 }));
Track.displayName = "SliderTrack";
var TrackFill = React.forwardRef((props, forwardRef5) => React.createElement(Primitive.div, { ...props, ref: forwardRef5 }));
TrackFill.displayName = "SliderTrackFill";
var PreviewBridge = createReactComponent(SliderPreviewInstance);
var Preview = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(PreviewBridge, { ...props }, (props2) => React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
Preview.displayName = "SliderPreview";
var Value$2 = React.forwardRef(({ children, ...props }, forwardRef5) => {
  return React.createElement(SliderValueBridge, { ...props }, (props2, instance) => {
    const $text = useSignal(() => instance.getValueText(), instance);
    return React.createElement(Primitive.div, { ...props2, ref: forwardRef5 }, $text, children);
  });
});
Value$2.displayName = "SliderValue";
var slider = Object.freeze({
  __proto__: null,
  Preview,
  Root: Root$5,
  Thumb,
  Track,
  TrackFill,
  Value: Value$2
});
var VolumeSliderBridge = createReactComponent(VolumeSliderInstance, {
  domEventsRegex: /^onMedia/
});
var Root$4 = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(VolumeSliderBridge, { ...props, ref: forwardRef5 }, (props2) => React.createElement(Primitive.div, { ...props2 }, children));
  }
);
Root$4.displayName = "VolumeSlider";
var Value$1 = React.forwardRef(({ children, ...props }, forwardRef5) => {
  return React.createElement(SliderValueBridge, { ...props }, (props2, instance) => {
    const $text = useSignal(() => instance.getValueText(), instance);
    return React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, $text, children);
  });
});
Value$1.displayName = "SliderValue";
var volumeSlider = Object.freeze({
  __proto__: null,
  Preview,
  Root: Root$4,
  Thumb,
  Track,
  TrackFill,
  Value: Value$1
});
function createVTTCue(startTime = 0, endTime = 0, text = "") {
  if (IS_SERVER) {
    return {
      startTime,
      endTime,
      text,
      addEventListener: noop,
      removeEventListener: noop,
      dispatchEvent: noop
    };
  }
  return new window.VTTCue(startTime, endTime, text);
}
var ThumbnailBridge = createReactComponent(ThumbnailInstance);
var Root$3 = React.forwardRef(({ children, ...props }, forwardRef5) => {
  return React.createElement(ThumbnailBridge, { ...props }, (props2) => React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
});
Root$3.displayName = "Thumbnail";
var Img = React.forwardRef(({ children, ...props }, forwardRef5) => {
  const { src, img, crossOrigin } = useStateContext(ThumbnailInstance.state), $src = useSignal(src), $crossOrigin = useSignal(crossOrigin);
  return React.createElement(
    Primitive.img,
    {
      crossOrigin: $crossOrigin,
      ...props,
      src: $src,
      ref: composeRefs(img.set, forwardRef5)
    },
    children
  );
});
Img.displayName = "ThumbnailImg";
var thumbnail = Object.freeze({
  __proto__: null,
  Img,
  Root: Root$3
});
var TimeSliderContext = React.createContext({
  $chapters: signal(null)
});
TimeSliderContext.displayName = "TimeSliderContext";
var TimeSliderBridge = createReactComponent(TimeSliderInstance, {
  domEventsRegex: /^onMedia/
});
var Root$2 = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    const $chapters = React.useMemo(() => signal(null), []);
    return React.createElement(TimeSliderContext.Provider, { value: { $chapters } }, React.createElement(TimeSliderBridge, { ...props, ref: forwardRef5 }, (props2) => React.createElement(Primitive.div, { ...props2 }, children)));
  }
);
Root$2.displayName = "TimeSlider";
var SliderChaptersBridge = createReactComponent(SliderChaptersInstance);
var Chapters = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(SliderChaptersBridge, { ...props }, (props2, instance) => React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, React.createElement(ChapterTracks, { instance }, children)));
  }
);
Chapters.displayName = "SliderChapters";
function ChapterTracks({ instance, children }) {
  const $cues = useSignal(() => instance.cues, instance), refs = React.useRef([]), emptyCue = React.useRef(), { $chapters } = React.useContext(TimeSliderContext);
  if (!emptyCue.current) {
    emptyCue.current = createVTTCue();
  }
  React.useEffect(() => {
    $chapters.set(instance);
    return () => void $chapters.set(null);
  }, [instance]);
  React.useEffect(() => {
    instance.setRefs(refs.current);
  }, [$cues]);
  return children($cues.length ? $cues : [emptyCue.current], (el) => {
    if (!el) {
      refs.current.length = 0;
      return;
    }
    refs.current.push(el);
  });
}
ChapterTracks.displayName = "SliderChapterTracks";
var ChapterTitle = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    const { $chapters } = React.useContext(TimeSliderContext), [title, setTitle] = React.useState();
    React.useEffect(() => {
      return effect(() => {
        const chapters = $chapters(), cue = (chapters == null ? void 0 : chapters.activePointerCue) || (chapters == null ? void 0 : chapters.activeCue);
        setTitle((cue == null ? void 0 : cue.text) || "");
      });
    }, []);
    return React.createElement(Primitive.div, { ...props, ref: forwardRef5 }, title, children);
  }
);
ChapterTitle.displayName = "SliderChapterTitle";
var Value = React.forwardRef(({ children, ...props }, forwardRef5) => {
  return React.createElement(SliderValueBridge, { ...props }, (props2, instance) => {
    const $text = useSignal(() => instance.getValueText(), instance);
    return React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, $text, children);
  });
});
Value.displayName = "SliderValue";
var Progress = React.forwardRef((props, forwardRef5) => React.createElement(Primitive.div, { ...props, ref: forwardRef5 }));
Progress.displayName = "SliderProgress";
var SliderThumbnailBridge = createReactComponent(SliderThumbnailInstance);
var ThumbnailRoot = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(SliderThumbnailBridge, { ...props }, (props2) => React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
ThumbnailRoot.displayName = "SliderThumbnail";
var Thumbnail = {
  Root: ThumbnailRoot,
  Img
};
var VideoBridge = createReactComponent(SliderVideoInstance, {
  events: ["onCanPlay", "onError"]
});
var Video = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(VideoBridge, { ...props }, (props2, instance) => React.createElement(VideoProvider, { ...props2, instance, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
Video.displayName = "SliderVideo";
var VideoProvider = React.forwardRef(
  ({ instance, children, ...props }, forwardRef5) => {
    const { canLoad } = useStateContext(mediaState), { src, video, crossOrigin } = instance.$state, $src = useSignal(src), $canLoad = useSignal(canLoad), $crossOrigin = useSignal(crossOrigin);
    return React.createElement(
      Primitive.video,
      {
        style: { maxWidth: "unset" },
        ...props,
        src: $src || void 0,
        muted: true,
        playsInline: true,
        preload: $canLoad ? "auto" : "none",
        crossOrigin: $crossOrigin || void 0,
        ref: composeRefs(video.set, forwardRef5)
      },
      children
    );
  }
);
VideoProvider.displayName = "SliderVideoProvider";
var timeSlider = Object.freeze({
  __proto__: null,
  ChapterTitle,
  Chapters,
  Preview,
  Progress,
  Root: Root$2,
  Thumb,
  Thumbnail,
  Track,
  TrackFill,
  Value,
  Video
});
var RadioGroupBridge = createReactComponent(RadioGroupInstance, {
  events: ["onChange"]
});
var Root$1 = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(RadioGroupBridge, { ...props, ref: forwardRef5 }, (props2) => React.createElement(Primitive.div, { ...props2 }, children));
  }
);
Root$1.displayName = "RadioGroup";
var ItemBridge$1 = createReactComponent(RadioInstance, {
  events: ["onChange", "onSelect"]
});
var Item$1 = React.forwardRef(({ children, ...props }, forwardRef5) => {
  return React.createElement(ItemBridge$1, { ...props }, (props2) => React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
});
Item$1.displayName = "RadioItem";
var radioGroup = Object.freeze({
  __proto__: null,
  Item: Item$1,
  Root: Root$1
});
var IS_SERVER2 = typeof document === "undefined";
var MenuBridge = createReactComponent(MenuInstance, {
  events: ["onOpen", "onClose"],
  domEventsRegex: /^onMedia/
});
var Root = React.forwardRef(({ children, ...props }, forwardRef5) => {
  return React.createElement(MenuBridge, { ...props, ref: forwardRef5 }, (props2, instance) => React.createElement(
    Primitive.div,
    {
      ...props2,
      style: { display: !instance.isSubmenu ? "contents" : void 0, ...props2.style }
    },
    children
  ));
});
Root.displayName = "Menu";
var ButtonBridge = createReactComponent(MenuButtonInstance, {
  events: ["onSelect"]
});
var Button = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(ButtonBridge, { ...props }, (props2) => React.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
Button.displayName = "MenuButton";
var Portal = React.forwardRef(
  ({ disabled = false, children, ...props }, forwardRef5) => {
    let fullscreen = useMediaState("fullscreen"), shouldPortal = disabled === "fullscreen" ? !fullscreen : !disabled;
    return IS_SERVER2 || !shouldPortal ? children : (0, import_react_dom.createPortal)(
      React.createElement(
        Primitive.div,
        {
          ...props,
          style: { display: "contents", ...props.style },
          ref: forwardRef5
        },
        children
      ),
      document.body
    );
  }
);
Portal.displayName = "MenuPortal";
var ItemsBridge = createReactComponent(MenuItemsInstance);
var Items = React.forwardRef(({ children, ...props }, forwardRef5) => {
  return React.createElement(ItemsBridge, { ...props }, (props2) => React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
});
Items.displayName = "MenuItems";
var ItemBridge = createReactComponent(MenuItemInstance);
var Item = React.forwardRef(({ children, ...props }, forwardRef5) => {
  return React.createElement(ItemBridge, { ...props }, (props2) => React.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
});
Item.displayName = "MenuItem";
var menu = Object.freeze({
  __proto__: null,
  Button,
  Content: Items,
  Item,
  Items,
  Portal,
  Radio: Item$1,
  RadioGroup: Root$1,
  Root
});
var GestureBridge = createReactComponent(GestureInstance, {
  events: ["onWillTrigger", "onTrigger"]
});
var Gesture = React.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React.createElement(GestureBridge, { ...props, ref: forwardRef5 }, (props2) => React.createElement(Primitive.div, { ...props2 }, children));
  }
);
Gesture.displayName = "Gesture";
var TimeBridge = createReactComponent(TimeInstance);
var Time = React.forwardRef(({ children, ...props }, forwardRef5) => {
  return React.createElement(TimeBridge, { ...props }, (props2, instance) => React.createElement(TimeText, { ...props2, instance, ref: composeRefs(props2.ref, forwardRef5) }, children));
});
Time.displayName = "Time";
var TimeText = React.forwardRef(
  ({ instance, children, ...props }, forwardRef5) => {
    const { timeText } = instance.$state, $timeText = useSignal(timeText);
    return React.createElement(Primitive.div, { ...props, ref: forwardRef5 }, $timeText, children);
  }
);
TimeText.displayName = "TimeText";
function useMediaPlayer() {
  const context = useMediaContext();
  if (!context) {
    throw Error(
      "[vidstack] no media context was found - was this called outside of `<MediaPlayer>`?"
    );
  }
  return (context == null ? void 0 : context.player) || null;
}
function useAudioOptions() {
  const media = useMediaContext(), { audioTracks, audioTrack } = media.$state, $audioTracks = useSignal(audioTracks);
  useSignal(audioTrack);
  return React.useMemo(() => {
    const options = $audioTracks.map((track) => ({
      track,
      label: track.label,
      value: getTrackValue$1(track),
      get selected() {
        return audioTrack() === track;
      },
      select(trigger) {
        const index = audioTracks().indexOf(track);
        if (index >= 0)
          media.remote.changeAudioTrack(index, trigger);
      }
    }));
    Object.defineProperty(options, "disabled", {
      get() {
        return options.length <= 1;
      }
    });
    Object.defineProperty(options, "selectedTrack", {
      get() {
        return audioTrack();
      }
    });
    Object.defineProperty(options, "selectedValue", {
      get() {
        const track = audioTrack();
        return track ? getTrackValue$1(track) : void 0;
      }
    });
    return options;
  }, [$audioTracks]);
}
function getTrackValue$1(track) {
  return track.label.toLowerCase();
}
function useCaptionOptions({ off = true } = {}) {
  const media = useMediaContext(), { textTracks, textTrack } = media.$state, $textTracks = useSignal(textTracks);
  useSignal(textTrack);
  return React.useMemo(() => {
    const captionTracks = $textTracks.filter(isTrackCaptionKind), options = captionTracks.map((track) => ({
      track,
      label: track.label,
      value: getTrackValue(track),
      get selected() {
        return textTrack() === track;
      },
      select(trigger) {
        const index = textTracks().indexOf(track);
        if (index >= 0)
          media.remote.changeTextTrackMode(index, "showing", trigger);
      }
    }));
    if (off) {
      options.unshift({
        track: null,
        label: isString(off) ? off : "Off",
        value: "off",
        get selected() {
          return !textTrack();
        },
        select(trigger) {
          media.remote.toggleCaptions(trigger);
        }
      });
    }
    Object.defineProperty(options, "disabled", {
      get() {
        return !captionTracks.length;
      }
    });
    Object.defineProperty(options, "selectedTrack", {
      get() {
        return textTrack();
      }
    });
    Object.defineProperty(options, "selectedValue", {
      get() {
        const track = textTrack();
        return track ? getTrackValue(track) : "off";
      }
    });
    return options;
  }, [$textTracks]);
}
function getTrackValue(track) {
  return track.id + ":" + track.kind + "-" + track.label.toLowerCase();
}
function useVideoQualityOptions({
  auto = true,
  sort = "descending"
} = {}) {
  const media = useMediaContext(), { qualities, quality, autoQuality, canSetQuality } = media.$state, $qualities = useSignal(qualities);
  useSignal(quality);
  useSignal(autoQuality);
  useSignal(canSetQuality);
  return React.useMemo(() => {
    const options = [...$qualities].sort(sort === "descending" ? sortDescending : sortAscending).map((_quality) => {
      return {
        quality: _quality,
        label: _quality.height + "p",
        value: getQualityValue(_quality),
        bitrateText: _quality.bitrate >= 0 ? `${(_quality.bitrate / 1e6).toFixed(2)} Mbps` : null,
        get selected() {
          return _quality === quality();
        },
        get autoSelected() {
          return autoQuality();
        },
        select(trigger) {
          const index = qualities().indexOf(_quality);
          if (index >= 0)
            media.remote.changeQuality(index, trigger);
        }
      };
    });
    if (auto) {
      options.unshift({
        quality: null,
        label: isString(auto) ? auto : "Auto",
        value: "auto",
        bitrateText: null,
        get selected() {
          return autoQuality();
        },
        get autoSelected() {
          return autoQuality();
        },
        select(trigger) {
          media.remote.requestAutoQuality(trigger);
        }
      });
    }
    Object.defineProperty(options, "disabled", {
      get() {
        return !canSetQuality() || !$qualities.length;
      }
    });
    Object.defineProperty(options, "selectedQuality", {
      get() {
        return quality();
      }
    });
    Object.defineProperty(options, "selectedValue", {
      get() {
        const $quality = quality();
        return !autoQuality() && $quality ? getQualityValue($quality) : "auto";
      }
    });
    return options;
  }, [$qualities, sort]);
}
function sortAscending(a, b) {
  return a.height === b.height ? a.bitrate - b.bitrate : a.height - b.height;
}
function sortDescending(a, b) {
  return b.height === a.height ? b.bitrate - a.bitrate : b.height - a.height;
}
function getQualityValue(quality) {
  return quality.height + "_" + quality.bitrate;
}
var DEFAULT_PLAYBACK_RATES2 = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2];
function usePlaybackRateOptions({
  rates = DEFAULT_PLAYBACK_RATES2,
  normalLabel = "Normal"
} = {}) {
  const media = useMediaContext(), { playbackRate, canSetPlaybackRate } = media.$state;
  useSignal(playbackRate);
  useSignal(canSetPlaybackRate);
  return React.useMemo(() => {
    const options = rates.map((opt) => {
      const label = typeof opt === "number" ? opt === 1 && normalLabel ? normalLabel : opt + "x" : opt.label, rate = typeof opt === "number" ? opt : opt.rate;
      return {
        label,
        value: rate.toString(),
        rate,
        get selected() {
          return playbackRate() === rate;
        },
        select(trigger) {
          media.remote.changePlaybackRate(rate, trigger);
        }
      };
    });
    Object.defineProperty(options, "disabled", {
      get() {
        return !canSetPlaybackRate() || !options.length;
      }
    });
    Object.defineProperty(options, "selectedValue", {
      get() {
        return playbackRate().toString();
      }
    });
    return options;
  }, [rates]);
}

// node_modules/@vidstack/react/dist/dev/chunks/vidstack-Xvq9wjeH.js
var React2 = __toESM(require_react(), 1);
var Icon = React2.forwardRef((props, ref) => {
  const { width, height, size = null, paths, ...restProps } = props;
  return React2.createElement("svg", {
    viewBox: "0 0 32 32",
    ...restProps,
    width: width ?? size,
    height: height ?? size,
    fill: "none",
    "aria-hidden": "true",
    focusable: "false",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    dangerouslySetInnerHTML: { __html: paths }
  });
});
Icon.displayName = "VidstackIcon";

// node_modules/@vidstack/react/dist/dev/chunks/vidstack-BqbbXnmy.js
var React3 = __toESM(require_react(), 1);
var ControlsBridge = createReactComponent(ControlsInstance);
var Root$22 = React3.forwardRef(({ children, ...props }, forwardRef5) => {
  return React3.createElement(ControlsBridge, { ...props }, (props2) => React3.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
});
Root$22.displayName = "Controls";
var ControlsGroupBridge = createReactComponent(ControlsGroupInstance);
var Group = React3.forwardRef(({ children, ...props }, forwardRef5) => {
  return React3.createElement(ControlsGroupBridge, { ...props }, (props2) => React3.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
});
Group.displayName = "ControlsGroup";
var controls = Object.freeze({
  __proto__: null,
  Group,
  Root: Root$22
});
var TooltipBridge = createReactComponent(TooltipInstance);
function Root$12({ children, ...props }) {
  return React3.createElement(TooltipBridge, { ...props }, children);
}
Root$12.displayName = "Tooltip";
var TriggerBridge = createReactComponent(TooltipTriggerInstance);
var Trigger = React3.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React3.createElement(TriggerBridge, { ...props }, (props2) => React3.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
Trigger.displayName = "TooltipTrigger";
var ContentBridge = createReactComponent(TooltipContentInstance);
var Content = React3.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React3.createElement(ContentBridge, { ...props }, (props2) => React3.createElement(Primitive.div, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
Content.displayName = "TooltipContent";
var tooltip = Object.freeze({
  __proto__: null,
  Content,
  Root: Root$12,
  Trigger
});
var GoogleCastButtonBridge = createReactComponent(GoogleCastButtonInstance, {
  domEventsRegex: /^onMedia/
});
var GoogleCastButton = React3.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React3.createElement(GoogleCastButtonBridge, { ...props }, (props2) => React3.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
GoogleCastButton.displayName = "GoogleCastButton";
var Title = React3.forwardRef(({ children, ...props }, forwardRef5) => {
  const $title = useMediaState("title");
  return React3.createElement(Primitive.span, { ...props, ref: forwardRef5 }, $title, children);
});
Title.displayName = "Title";
function useActiveTextCues(track) {
  const [activeCues, setActiveCues] = React3.useState([]);
  React3.useEffect(() => {
    if (!track) {
      setActiveCues([]);
      return;
    }
    function onCuesChange() {
      setActiveCues(track.activeCues);
    }
    onCuesChange();
    return listenEvent(track, "cue-change", onCuesChange);
  }, [track]);
  return activeCues;
}
function useActiveTextTrack(kind) {
  const media = useMediaContext(), [track, setTrack] = React3.useState(null);
  React3.useEffect(() => {
    return watchActiveTextTrack(media.textTracks, kind, setTrack);
  }, [kind]);
  return track;
}
function useChapterTitle() {
  var _a;
  const $track = useActiveTextTrack("chapters"), $cues = useActiveTextCues($track);
  return ((_a = $cues[0]) == null ? void 0 : _a.text) || "";
}
var ChapterTitle2 = React3.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    const $chapterTitle = useChapterTitle();
    return React3.createElement(Primitive.span, { ...props, ref: forwardRef5 }, $chapterTitle, children);
  }
);
ChapterTitle2.displayName = "ChapterTitle";
var CaptionsBridge = createReactComponent(CaptionsInstance);
var Captions = React3.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React3.createElement(CaptionsBridge, { ...props, ref: forwardRef5 }, (props2) => React3.createElement(Primitive.div, { ...props2 }, children));
  }
);
Captions.displayName = "Captions";
var Root2 = React3.forwardRef(
  ({ size = 96, children, ...props }, forwardRef5) => {
    return React3.createElement(
      "svg",
      {
        width: size,
        height: size,
        fill: "none",
        viewBox: "0 0 120 120",
        "aria-hidden": "true",
        "data-part": "root",
        ...props,
        ref: forwardRef5
      },
      children
    );
  }
);
var Track2 = React3.forwardRef(
  ({ width = 8, children, ...props }, ref) => React3.createElement(
    "circle",
    {
      cx: "60",
      cy: "60",
      r: "54",
      stroke: "currentColor",
      strokeWidth: width,
      "data-part": "track",
      ...props,
      ref
    },
    children
  )
);
var TrackFill2 = React3.forwardRef(
  ({ width = 8, fillPercent = 50, children, ...props }, ref) => React3.createElement(
    "circle",
    {
      cx: "60",
      cy: "60",
      r: "54",
      stroke: "currentColor",
      pathLength: "100",
      strokeWidth: width,
      strokeDasharray: 100,
      strokeDashoffset: 100 - fillPercent,
      "data-part": "track-fill",
      ...props,
      ref
    },
    children
  )
);
var spinner = Object.freeze({
  __proto__: null,
  Root: Root2,
  Track: Track2,
  TrackFill: TrackFill2
});
function createSignal(initialValue, deps = []) {
  const scope = useReactScope();
  return React3.useMemo(() => scoped(() => signal(initialValue), scope), [scope, ...deps]);
}
function useScoped(compute) {
  const scope = useReactScope();
  return React3.useMemo(() => scoped(compute, scope), [scope]);
}
function useTextCues(track) {
  const [cues, setCues] = React3.useState([]);
  React3.useEffect(() => {
    if (!track)
      return;
    function onCuesChange(track2) {
      setCues([...track2.cues]);
    }
    const disposal = createDisposalBin();
    disposal.add(
      listenEvent(track, "add-cue", () => onCuesChange(track)),
      listenEvent(track, "remove-cue", () => onCuesChange(track))
    );
    onCuesChange(track);
    return () => {
      disposal.empty();
      setCues([]);
    };
  }, [track]);
  return cues;
}
function useChapterOptions() {
  const media = useMediaContext(), track = useActiveTextTrack("chapters"), cues = useTextCues(track), $startTime = useSignal(media.$state.clipStartTime), $endTime = useSignal(media.$state.clipEndTime) || Infinity;
  useActiveTextCues(track);
  return React3.useMemo(() => {
    const options = track ? cues.filter((cue) => cue.startTime <= $endTime && cue.endTime >= $startTime).map((cue, i) => {
      let currentRef = null, stopProgressEffect;
      return {
        cue,
        label: cue.text,
        value: i.toString(),
        startTimeText: formatTime(Math.max(0, cue.startTime - $startTime)),
        durationText: formatSpokenTime(
          Math.min($endTime, cue.endTime) - Math.max($startTime, cue.startTime)
        ),
        get selected() {
          return cue === track.activeCues[0];
        },
        setProgressVar(ref) {
          if (!ref || cue !== track.activeCues[0]) {
            stopProgressEffect == null ? void 0 : stopProgressEffect();
            stopProgressEffect = void 0;
            ref == null ? void 0 : ref.style.setProperty("--progress", "0%");
            currentRef = null;
            return;
          }
          if (currentRef === ref)
            return;
          currentRef = ref;
          stopProgressEffect == null ? void 0 : stopProgressEffect();
          stopProgressEffect = effect(() => {
            const { realCurrentTime } = media.$state, time = realCurrentTime(), cueStartTime = Math.max($startTime, cue.startTime), duration = Math.min($endTime, cue.endTime) - cueStartTime, progress = Math.max(0, time - cueStartTime) / duration * 100;
            ref.style.setProperty("--progress", progress.toFixed(3) + "%");
          });
        },
        select(trigger) {
          media.remote.seek(cue.startTime - $startTime, trigger);
        }
      };
    }) : [];
    Object.defineProperty(options, "selectedValue", {
      get() {
        const index = options.findIndex((option) => option.selected);
        return (index >= 0 ? index : 0).toString();
      }
    });
    return options;
  }, [cues, $startTime, $endTime]);
}

// node_modules/@vidstack/react/dist/dev/chunks/vidstack-CBvcxwwp.js
var React4 = __toESM(require_react(), 1);
function useMediaRemote(target) {
  const media = useMediaContext(), remote = React4.useRef();
  if (!remote.current) {
    remote.current = new MediaRemoteControl();
  }
  React4.useEffect(() => {
    const ref = target && "current" in target ? target.current : target, isPlayerRef = ref instanceof MediaPlayerInstance, player = isPlayerRef ? ref : media == null ? void 0 : media.player;
    remote.current.setPlayer(player ?? null);
    remote.current.setTarget(ref ?? null);
  }, [media, target && "current" in target ? target.current : target]);
  return remote.current;
}

// node_modules/@vidstack/react/dist/dev/chunks/vidstack-CengGG-v.js
var import_react = __toESM(require_react(), 1);
var sliderStateRecord = SliderInstance.state.record;
var initialSliderStore = Object.keys(sliderStateRecord).reduce(
  (store, prop) => ({
    ...store,
    [prop]() {
      return sliderStateRecord[prop];
    }
  }),
  {}
);
function useSliderState(prop, ref) {
  var _a;
  const $state = useStateContext(sliderState);
  if (!$state && !ref) {
    console.warn(
      `[vidstack] \`useSliderState\` requires \`RefObject<SliderInstance>\` argument if called outside of a slider component`
    );
  }
  return useSignal((((_a = ref == null ? void 0 : ref.current) == null ? void 0 : _a.$state) || $state || initialSliderStore)[prop]);
}
function useSliderStore(ref) {
  const $state = useStateContext(sliderState);
  if (!$state && !ref) {
    console.warn(
      `[vidstack] \`useSliderStore\` requires \`RefObject<SliderInstance>\` argument if called outside of a slider component`
    );
  }
  return useSignalRecord((ref == null ? void 0 : ref.current) ? ref.current.$state : $state || initialSliderStore);
}

// node_modules/@vidstack/react/dist/dev/vidstack.js
var import_react_dom2 = __toESM(require_react_dom());
var LibASSTextRenderer = class {
  constructor(loader, config) {
    this.loader = loader;
    this.config = config;
    this.priority = 1;
    this._instance = null;
    this._track = null;
    this._typeRE = /(ssa|ass)$/;
  }
  canRender(track, video) {
    return !!video && !!track.src && (isString(track.type) && this._typeRE.test(track.type) || this._typeRE.test(track.src));
  }
  attach(video) {
    if (!video)
      return;
    this.loader().then(async (mod) => {
      var _a;
      this._instance = new mod.default({
        ...this.config,
        video,
        subUrl: ((_a = this._track) == null ? void 0 : _a.src) || ""
      });
      listenEvent(this._instance, "ready", () => {
        var _a2;
        const canvas = (_a2 = this._instance) == null ? void 0 : _a2._canvas;
        if (canvas)
          canvas.style.pointerEvents = "none";
      });
      listenEvent(this._instance, "error", (event) => {
        if (this._track) {
          this._track[TextTrackSymbol._readyState] = 3;
          this._track.dispatchEvent(
            new DOMEvent("error", {
              trigger: event,
              detail: event.error
            })
          );
        }
      });
    });
  }
  changeTrack(track) {
    var _a;
    if (!track || track.readyState === 3) {
      this._freeTrack();
    } else if (this._track !== track) {
      (_a = this._instance) == null ? void 0 : _a.setTrackByUrl(track.src);
      this._track = track;
    }
  }
  detach() {
    this._freeTrack();
  }
  _freeTrack() {
    var _a;
    (_a = this._instance) == null ? void 0 : _a.freeTrack();
    this._track = null;
  }
};
var playerCallbacks = [
  "onAbort",
  "onAudioTrackChange",
  "onAudioTracksChange",
  "onAutoPlay",
  "onAutoPlayChange",
  "onAutoPlayFail",
  "onCanLoad",
  "onCanPlay",
  "onCanPlayThrough",
  "onControlsChange",
  "onDestroy",
  "onDurationChange",
  "onEmptied",
  "onEnd",
  "onEnded",
  "onError",
  "onFindMediaPlayer",
  "onFullscreenChange",
  "onFullscreenError",
  "onLiveChange",
  "onLiveEdgeChange",
  "onLoadedData",
  "onLoadedMetadata",
  "onLoadStart",
  "onLoopChange",
  "onOrientationChange",
  "onPause",
  "onPictureInPictureChange",
  "onPictureInPictureError",
  "onPlay",
  "onPlayFail",
  "onPlaying",
  "onPlaysInlineChange",
  "onPosterChange",
  "onProgress",
  "onProviderChange",
  "onProviderLoaderChange",
  "onProviderSetup",
  "onQualitiesChange",
  "onQualityChange",
  "onRateChange",
  "onReplay",
  "onSeeked",
  "onSeeking",
  "onSourceChange",
  "onSourceChange",
  "onStalled",
  "onStarted",
  "onStreamTypeChange",
  "onSuspend",
  "onTextTrackChange",
  "onTextTracksChange",
  "onTimeUpdate",
  "onTitleChange",
  "onVdsLog",
  "onVideoPresentationChange",
  "onVolumeChange",
  "onWaiting"
];
var MediaPlayerBridge = createReactComponent(MediaPlayerInstance, {
  events: playerCallbacks,
  eventsRegex: /^onHls/,
  domEventsRegex: /^onMedia/
});
var MediaPlayer = React5.forwardRef(
  ({ aspectRatio, children, ...props }, forwardRef5) => {
    return React5.createElement(
      MediaPlayerBridge,
      {
        ...props,
        src: props.src,
        ref: forwardRef5,
        style: {
          aspectRatio,
          ...props.style
        }
      },
      (props2) => React5.createElement(Primitive.div, { ...props2 }, children)
    );
  }
);
MediaPlayer.displayName = "MediaPlayer";
var MediaProviderBridge = createReactComponent(MediaProviderInstance);
var MediaProvider = React5.forwardRef(
  ({ loaders = [], children, mediaProps, ...props }, forwardRef5) => {
    const reactLoaders = React5.useMemo(() => loaders.map((Loader) => new Loader()), loaders);
    return React5.createElement(MediaProviderBridge, { ...props, loaders: reactLoaders, ref: forwardRef5 }, (props2, instance) => React5.createElement("div", { ...props2 }, React5.createElement(MediaOutlet, { ...mediaProps, provider: instance }), children));
  }
);
MediaProvider.displayName = "MediaProvider";
function MediaOutlet({ provider, ...props }) {
  const { controls: controls2, crossOrigin, poster, remotePlaybackInfo } = useStateContext(mediaState), { loader } = provider.$state, {
    $iosControls: $$iosControls,
    $provider: $$provider,
    $providerSetup: $$providerSetup
  } = useMediaContext(), $controls = useSignal(controls2), $iosControls = useSignal($$iosControls), $nativeControls = $controls || $iosControls, $crossOrigin = useSignal(crossOrigin), $poster = useSignal(poster), $loader = useSignal(loader), $provider = useSignal($$provider), $providerSetup = useSignal($$providerSetup), $remoteInfo = useSignal(remotePlaybackInfo), $mediaType = $loader == null ? void 0 : $loader.mediaType(), isYouTubeEmbed = ($loader == null ? void 0 : $loader.name) === "youtube", isVimeoEmbed = ($loader == null ? void 0 : $loader.name) === "vimeo", isEmbed = isYouTubeEmbed || isVimeoEmbed, isRemotion = ($loader == null ? void 0 : $loader.name) === "remotion", isGoogleCast = ($loader == null ? void 0 : $loader.name) === "google-cast", [googleCastIconPaths, setGoogleCastIconPaths] = React5.useState("");
  React5.useEffect(() => {
    if (!isGoogleCast || googleCastIconPaths)
      return;
    import("./vidstack-DpFFzXBw-CAGRPIJR.js").then((mod) => {
      setGoogleCastIconPaths(mod.default);
    });
  }, [isGoogleCast]);
  if (isGoogleCast) {
    return React5.createElement(
      "div",
      {
        className: "vds-google-cast",
        ref: (el) => {
          provider.load(el);
        }
      },
      React5.createElement(Icon, { paths: googleCastIconPaths }),
      ($remoteInfo == null ? void 0 : $remoteInfo.deviceName) ? React5.createElement("span", { className: "vds-google-cast-info" }, "Google Cast on", " ", React5.createElement("span", { className: "vds-google-cast-device-name" }, $remoteInfo.deviceName)) : null
    );
  }
  if (isRemotion) {
    return React5.createElement("div", { "data-remotion-canvas": true }, React5.createElement(
      "div",
      {
        "data-remotion-container": true,
        ref: (el) => {
          provider.load(el);
        }
      },
      isRemotionProvider($provider) && $providerSetup ? React5.createElement($provider.render) : null
    ));
  }
  return isEmbed ? React5.createElement(
    React5.Fragment,
    null,
    React5.createElement("iframe", {
      className: isYouTubeEmbed ? "vds-youtube" : "vds-vimeo",
      suppressHydrationWarning: true,
      tabIndex: !$nativeControls ? -1 : void 0,
      "aria-hidden": "true",
      "data-no-controls": !$nativeControls ? "" : void 0,
      ref(el) {
        provider.load(el);
      }
    }),
    !$nativeControls ? React5.createElement("div", { className: "vds-blocker" }) : null
  ) : $mediaType ? React5.createElement($mediaType === "audio" ? "audio" : "video", {
    ...props,
    controls: $nativeControls ? true : null,
    crossOrigin: typeof $crossOrigin === "boolean" ? "" : $crossOrigin,
    poster: $mediaType === "video" && $nativeControls && $poster ? $poster : null,
    preload: "none",
    "aria-hidden": "true",
    suppressHydrationWarning: true,
    ref(el) {
      provider.load(el);
    }
  }) : null;
}
MediaOutlet.displayName = "MediaOutlet";
function createTextTrack(init) {
  const media = useMediaContext(), track = React5.useMemo(() => new TextTrack(init), Object.values(init));
  React5.useEffect(() => {
    media.textTracks.add(track);
    return () => void media.textTracks.remove(track);
  }, [track]);
  return track;
}
function Track3({ lang, ...props }) {
  createTextTrack({ language: lang, ...props });
  return null;
}
Track3.displayName = "Track";
var ToggleButtonBridge = createReactComponent(ToggleButtonInstance);
var ToggleButton = React5.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React5.createElement(ToggleButtonBridge, { ...props }, (props2) => React5.createElement(Primitive.button, { ...props2, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
ToggleButton.displayName = "ToggleButton";
var PosterBridge = createReactComponent(PosterInstance);
var Poster = React5.forwardRef(
  ({ children, ...props }, forwardRef5) => {
    return React5.createElement(PosterBridge, { ...props }, (props2, instance) => React5.createElement(PosterImg, { ...props2, instance, ref: composeRefs(props2.ref, forwardRef5) }, children));
  }
);
Poster.displayName = "Poster";
var PosterImg = React5.forwardRef(
  ({ instance, children, ...props }, forwardRef5) => {
    const { src, img, alt, crossOrigin, loading, hidden } = instance.$state, $src = useSignal(src), $alt = useSignal(alt), $crossOrigin = useSignal(crossOrigin), $loading = useSignal(loading), $hidden = useSignal(hidden);
    return React5.createElement(
      Primitive.img,
      {
        ...props,
        src: $src || "",
        alt: $alt || void 0,
        crossOrigin: $crossOrigin || void 0,
        ref: composeRefs(img.set, forwardRef5),
        style: { display: $loading || $hidden ? "none" : void 0 }
      },
      children
    );
  }
);
PosterImg.displayName = "PosterImg";
var Root3 = React5.forwardRef(({ children, ...props }, forwardRef5) => {
  return React5.createElement(
    Primitive.div,
    {
      translate: "yes",
      "aria-live": "off",
      "aria-atomic": "true",
      ...props,
      ref: forwardRef5
    },
    children
  );
});
Root3.displayName = "Caption";
var Text = React5.forwardRef((props, forwardRef5) => {
  const textTrack = useMediaState("textTrack"), [activeCue, setActiveCue] = React5.useState();
  React5.useEffect(() => {
    if (!textTrack)
      return;
    function onCueChange() {
      setActiveCue(textTrack == null ? void 0 : textTrack.activeCues[0]);
    }
    textTrack.addEventListener("cue-change", onCueChange);
    return () => {
      textTrack.removeEventListener("cue-change", onCueChange);
      setActiveCue(void 0);
    };
  }, [textTrack]);
  return React5.createElement(
    Primitive.span,
    {
      ...props,
      "data-part": "cue",
      dangerouslySetInnerHTML: {
        __html: (activeCue == null ? void 0 : activeCue.text) || ""
      },
      ref: forwardRef5
    }
  );
});
Text.displayName = "CaptionText";
var caption = Object.freeze({
  __proto__: null,
  Root: Root3,
  Text
});
function useState4(ctor, prop, ref) {
  const initialValue = React5.useMemo(() => ctor.state.record[prop], [ctor, prop]);
  return useSignal(ref.current ? ref.current.$state[prop] : initialValue);
}
var storesCache = /* @__PURE__ */ new Map();
function useStore(ctor, ref) {
  const initialStore = React5.useMemo(() => {
    let store = storesCache.get(ctor);
    if (!store) {
      store = new Proxy(ctor.state.record, {
        get: (_, prop) => () => ctor.state.record[prop]
      });
      storesCache.set(ctor, store);
    }
    return store;
  }, [ctor]);
  return useSignalRecord(ref.current ? ref.current.$state : initialStore);
}
function useMediaProvider() {
  const [provider, setProvider] = React5.useState(null), context = useMediaContext();
  if (!context) {
    throw Error(
      "[vidstack] no media context was found - was this called outside of `<MediaPlayer>`?"
    );
  }
  React5.useEffect(() => {
    if (!context)
      return;
    return effect(() => {
      setProvider(context.$provider());
    });
  }, []);
  return provider;
}
function useThumbnails(src, crossOrigin = null) {
  const scope = useReactScope(), $src = createSignal(src), $crossOrigin = createSignal(crossOrigin), loader = useScoped(() => ThumbnailsLoader.create($src, $crossOrigin));
  if (!scope) {
    console.warn(
      `[vidstack] \`useThumbnails\` must be called inside a child component of \`<MediaPlayer>\``
    );
  }
  React5.useEffect(() => {
    $src.set(src);
  }, [src]);
  React5.useEffect(() => {
    $crossOrigin.set(crossOrigin);
  }, [crossOrigin]);
  return useSignal(loader.$images);
}
function useActiveThumbnail(thumbnails, time) {
  return React5.useMemo(() => {
    let activeIndex = -1;
    for (let i = thumbnails.length - 1; i >= 0; i--) {
      const image = thumbnails[i];
      if (time >= image.startTime && (!image.endTime || time < image.endTime)) {
        activeIndex = i;
        break;
      }
    }
    return thumbnails[activeIndex] || null;
  }, [thumbnails, time]);
}
function useSliderPreview({
  clamp = false,
  offset = 0,
  orientation = "horizontal"
} = {}) {
  const [rootRef, setRootRef] = React5.useState(null), [previewRef, setPreviewRef] = React5.useState(null), [pointerValue, setPointerValue] = React5.useState(0), [isVisible, setIsVisible] = React5.useState(false);
  React5.useEffect(() => {
    if (!rootRef)
      return;
    const dragging = signal(false);
    function updatePointerValue(event) {
      if (!rootRef)
        return;
      setPointerValue(getPointerValue(rootRef, event, orientation));
    }
    return effect(() => {
      if (!dragging()) {
        listenEvent(rootRef, "pointerenter", () => {
          setIsVisible(true);
          previewRef == null ? void 0 : previewRef.setAttribute("data-visible", "");
        });
        listenEvent(rootRef, "pointerdown", (event) => {
          dragging.set(true);
          updatePointerValue(event);
        });
        listenEvent(rootRef, "pointerleave", () => {
          setIsVisible(false);
          previewRef == null ? void 0 : previewRef.removeAttribute("data-visible");
        });
        listenEvent(rootRef, "pointermove", (event) => {
          updatePointerValue(event);
        });
        return;
      }
      previewRef == null ? void 0 : previewRef.setAttribute("data-dragging", "");
      listenEvent(document, "pointerup", (event) => {
        dragging.set(false);
        previewRef == null ? void 0 : previewRef.removeAttribute("data-dragging");
        updatePointerValue(event);
      });
      listenEvent(document, "pointermove", (event) => {
        updatePointerValue(event);
      });
      listenEvent(document, "touchmove", (e) => e.preventDefault(), {
        passive: false
      });
    });
  }, [rootRef]);
  React5.useEffect(() => {
    if (previewRef) {
      previewRef.style.setProperty("--slider-pointer", pointerValue + "%");
    }
  }, [previewRef, pointerValue]);
  React5.useEffect(() => {
    if (!previewRef)
      return;
    const update = () => {
      updateSliderPreviewPlacement(previewRef, {
        offset,
        clamp,
        orientation
      });
    };
    update();
    const resize = new ResizeObserver(update);
    resize.observe(previewRef);
    return () => resize.disconnect();
  }, [previewRef, clamp, offset, orientation]);
  return {
    previewRootRef: setRootRef,
    previewRef: setPreviewRef,
    previewValue: pointerValue,
    isPreviewVisible: isVisible
  };
}
function getPointerValue(root, event, orientation) {
  let thumbPositionRate, rect = root.getBoundingClientRect();
  if (orientation === "vertical") {
    const { bottom: trackBottom, height: trackHeight } = rect;
    thumbPositionRate = (trackBottom - event.clientY) / trackHeight;
  } else {
    const { left: trackLeft, width: trackWidth } = rect;
    thumbPositionRate = (event.clientX - trackLeft) / trackWidth;
  }
  return round(Math.max(0, Math.min(100, 100 * thumbPositionRate)));
}
function round(num) {
  return Number(num.toFixed(3));
}
export {
  ARIAKeyShortcuts,
  AUDIO_EXTENSIONS,
  AUDIO_TYPES,
  AirPlayButton,
  AirPlayButtonInstance,
  AudioProviderLoader,
  AudioRadioGroup,
  AudioTrackList,
  caption as Caption,
  CaptionButton,
  CaptionButtonInstance,
  Captions,
  CaptionsInstance,
  CaptionsRadioGroup,
  ChapterTitle2 as ChapterTitle,
  ChaptersRadioGroup,
  controls as Controls,
  ControlsGroup,
  ControlsGroupInstance,
  ControlsInstance,
  DEFAULT_PLAYBACK_RATES,
  FullscreenButton,
  FullscreenButtonInstance,
  FullscreenController,
  Gesture,
  GestureInstance,
  GoogleCastButton,
  GoogleCastButtonInstance,
  HLSProviderLoader,
  HLS_VIDEO_EXTENSIONS,
  HLS_VIDEO_TYPES,
  Icon,
  LibASSTextRenderer,
  List,
  LiveButton,
  LiveButtonInstance,
  LocalMediaStorage,
  Logger,
  MEDIA_KEY_SHORTCUTS,
  MediaControls,
  MediaPlayer,
  MediaPlayerInstance,
  MediaProvider,
  MediaProviderInstance,
  MediaRemoteControl,
  menu as Menu,
  MenuButton,
  MenuButtonInstance,
  MenuInstance,
  MenuItem,
  MenuItemInstance,
  MenuItems,
  MenuItemsInstance,
  MenuPortal,
  MenuPortalInstance,
  MuteButton,
  MuteButtonInstance,
  PIPButton,
  PIPButtonInstance,
  PlayButton,
  PlayButtonInstance,
  Poster,
  PosterInstance,
  QualityRadioGroup,
  Radio,
  radioGroup as RadioGroup,
  RadioGroupInstance,
  RadioInstance,
  ScreenOrientationController,
  SeekButton,
  SeekButtonInstance,
  slider as Slider,
  SliderChapters,
  SliderChaptersInstance,
  SliderController,
  SliderInstance,
  SliderPreview,
  SliderPreviewInstance,
  SliderThumbnail,
  SliderThumbnailInstance,
  SliderValue,
  SliderValueInstance,
  SliderVideo,
  SliderVideoInstance,
  SpeedRadioGroup,
  spinner as Spinner,
  TextRenderers,
  TextTrack,
  TextTrackList,
  thumbnail as Thumbnail,
  ThumbnailInstance,
  ThumbnailsLoader,
  Time,
  TimeInstance,
  TimeRange,
  timeSlider as TimeSlider,
  TimeSliderInstance,
  Title,
  ToggleButton,
  ToggleButtonInstance,
  tooltip as Tooltip,
  TooltipContent,
  TooltipContentInstance,
  TooltipInstance,
  TooltipTrigger,
  TooltipTriggerInstance,
  Track3 as Track,
  VIDEO_EXTENSIONS,
  VIDEO_TYPES,
  VideoProviderLoader,
  VideoQualityList,
  VimeoProviderLoader,
  volumeSlider as VolumeSlider,
  VolumeSliderInstance,
  YouTubeProviderLoader,
  appendTriggerEvent,
  canChangeVolume,
  canFullscreen,
  canGoogleCastSrc,
  canOrientScreen,
  canPlayHLSNatively,
  canRotateScreen,
  canUsePictureInPicture,
  canUseVideoPresentation,
  createTextTrack,
  findActiveCue,
  findTriggerEvent,
  formatSpokenTime,
  formatTime,
  getTimeRangesEnd,
  getTimeRangesStart,
  hasTriggerEvent,
  isAudioProvider,
  isAudioSrc,
  isCueActive,
  isGoogleCastProvider,
  isHLSProvider,
  isHLSSrc,
  isHTMLAudioElement,
  isHTMLIFrameElement,
  isHTMLMediaElement,
  isHTMLVideoElement,
  isKeyboardClick,
  isKeyboardEvent,
  isMediaStream,
  isPointerEvent,
  isTrackCaptionKind,
  isVideoProvider,
  isVideoSrc,
  isVimeoProvider,
  isYouTubeProvider,
  mediaContext,
  mediaState,
  menuPortalContext,
  parseJSONCaptionsFile,
  sliderContext,
  sliderState,
  softResetMediaState,
  updateSliderPreviewPlacement,
  useActiveTextCues,
  useActiveTextTrack,
  useActiveThumbnail,
  useAudioOptions,
  useCaptionOptions,
  useChapterOptions,
  useChapterTitle,
  useMediaContext,
  useMediaPlayer,
  useMediaProvider,
  useMediaRemote,
  useMediaState,
  useMediaStore,
  usePlaybackRateOptions,
  usePlyrLayoutClasses,
  useSliderPreview,
  useSliderState,
  useSliderStore,
  useState4 as useState,
  useStore,
  useTextCues,
  useThumbnails,
  useVideoQualityOptions,
  walkTriggerEventChain,
  watchActiveTextTrack,
  watchCueTextChange
};
//# sourceMappingURL=@vidstack_react.js.map
